//note: A class must have atleast one field var, otherwisw it gives 'Allocated memory size must be postivie' error
//important: screen size: 512x256
//important: axis - x: 0-31, y: 0-15
//important: dir - 1 - forward, 2 - backward, 3 - up, 4 - down

//note: if println() not displaying, then try commenting Screen.clearScreen() in Platform.draw() method
class GameController
{
   static int moveDir;       // direction of the motion
   static int dispDir;       // direction in which the upcoming platforms must be displayed
   static int delay;           //wait time between each frame
   static int randomizer;
   static int nFrame; // to know how many frames passed under one sec
   static int timePassed; // to know no .of seconds passed
   static int hTimePassed; // to know the highest no .of seconds.
   static boolean isDay;   // true if the game is in day mode
   static boolean shouldRestart; // true if the game should restart
   static boolean isFirstTime; // true if the game is started for the first time

   field boolean exit;       // true when the game is over
   field int spawnDiff;      // difference between the y position of the current platform and the next platform
   field int baseHeight;     // buffer height to be maintained between the platform and the screen boundary when forward or backward
   field int baseWidth;     // buffer width to be maintained between the platform and the screen boundary when up or down
   field int max_death;

   field int dayNightTimer;  // timer to switch between day and night mode
   field int dayNightDelay;  // delay between each switch between day and night mode   


   constructor GameController new()
   {
      let hTimePassed = 0;
      let isFirstTime = true;
      do reset();
      return this;
   }

   method void reset()
   {
      let delay = 50;
      let moveDir = 1;
      let dispDir = 1;
      let spawnDiff = 2;
      let randomizer = 2912;
      let baseHeight = 3;
      let baseWidth = 5;
      let isDay = true;
      let dayNightDelay = 15;
      let dayNightTimer = dayNightDelay;
      let shouldRestart = true;
      let timePassed = 0;
      let nFrame = 0;
      let exit = false;
      do Screen.clearScreen();
      do Output.moveCursor(0,0);
      return;
   }

   function boolean getIsDay()
   {
      return isDay;
   }

   function boolean getShouldRestart()
   {
      return shouldRestart;
   }

   function void setDelay(int d)
   {
      let delay = d;
      return;
   }

   method int random(int x, int y)
   {
      var Rd rd;
      var int seed;
      do Random.seed(Memory.peek(Random.between(16384, 24577) + Memory.peek(0)));
      do Random.seed(Memory.peek(rd.between(16384, 24577, 0) + Memory.peek(0)));
      let seed = Random.between(x, y);
      do rd.seed(seed);
      return rd.between(x, y, 0);
   }

   function int get_randomizer() {
      return randomizer;
   }

   method void printGameName(int x, int y, boolean show, int cutoff)
   {
      var int memAddress, temp;
      // J
      let memAddress = 16384;
      let memAddress = memAddress + (y * 512) + x + cutoff;
      do print(memAddress, show);
      let memAddress = memAddress + 1;
      do print(memAddress, show);
      let memAddress = memAddress + 1;
      do print(memAddress, show);
      let memAddress = memAddress - 1 + 512;
      do print(memAddress, show);
      let memAddress = memAddress + 512;
      do print(memAddress, show);
      let memAddress = memAddress - 1;
      do print(memAddress, show);

      // U
      let memAddress = 16384;
      let memAddress = memAddress + (y * 512) + x + 4 + cutoff;
      do print(memAddress, show);
      let memAddress = memAddress + 512;
      do print(memAddress, show);
      let memAddress = memAddress + 512;
      do print(memAddress, show);
      let memAddress = memAddress + 1;
      do print(memAddress, show);
      let memAddress = memAddress + 1;
      do print(memAddress, show);
      let memAddress = memAddress - 512;
      do print(memAddress, show);
      let memAddress = memAddress - 512;
      do print(memAddress, show);

      // M
      let memAddress = 16384;
      let memAddress = memAddress + (y * 512) + x + 8 + cutoff;
      do print(memAddress, show);
      let memAddress = memAddress + 512;
      do print(memAddress, show);
      let memAddress = memAddress + 512;
      do print(memAddress, show);
      let memAddress = memAddress - 896 + 1;
      do print(memAddress, show);
      let memAddress = memAddress + 1 - 128;    
      do print(memAddress, show);
      let memAddress = memAddress + 512;
      do print(memAddress, show);
      let memAddress = memAddress + 512;
      do print(memAddress, show);

      // P
      let memAddress = 16384;
      let memAddress = memAddress + (y * 512) + x + 12 + cutoff;
      do print(memAddress, show);
      let memAddress = memAddress + 512;
      do print(memAddress, show);
      let memAddress = memAddress + 512;
      do print(memAddress, show);
      let memAddress = memAddress - 1024 + 1;
      let temp = memAddress;
      if (show)
      {
         do Memory.poke(memAddress + 0, -1);
         do Memory.poke(memAddress + 32, -1);
         do Memory.poke(memAddress + 64, -1);
         do Memory.poke(memAddress + 96, -1);
         do Memory.poke(memAddress + 128, -256);
         do Memory.poke(memAddress + 160, -256);
         do Memory.poke(memAddress + 192, -256);
         do Memory.poke(memAddress + 224, -256);
         do Memory.poke(memAddress + 256, -256);
         do Memory.poke(memAddress + 288, -256);
         do Memory.poke(memAddress + 320, -256);
         do Memory.poke(memAddress + 352, -256);
         do Memory.poke(memAddress + 384, -256);
         do Memory.poke(memAddress + 416, -256);
         do Memory.poke(memAddress + 448, -256);
         do Memory.poke(memAddress + 480, -256);
      }
      else
      {
         do Memory.poke(memAddress + 0, 0);
         do Memory.poke(memAddress + 32,0);
         do Memory.poke(memAddress + 64,0);
         do Memory.poke(memAddress + 96,0);
         do Memory.poke(memAddress + 128,0);
         do Memory.poke(memAddress + 160,0);
         do Memory.poke(memAddress + 192,0);
         do Memory.poke(memAddress + 224,0);
         do Memory.poke(memAddress + 256,0);
         do Memory.poke(memAddress + 288,0);
         do Memory.poke(memAddress + 320,0);
         do Memory.poke(memAddress + 352,0);
         do Memory.poke(memAddress + 384,0);
         do Memory.poke(memAddress + 416,0);
         do Memory.poke(memAddress + 448,0);
         do Memory.poke(memAddress + 480,0);
      }
      let memAddress = temp + 512;
      let temp = memAddress;
      if (show) {
         do Memory.poke(memAddress + 0, -256);
         do Memory.poke(memAddress + 32, -256);
         do Memory.poke(memAddress + 64, -256);
         do Memory.poke(memAddress + 96, -256);
         do Memory.poke(memAddress + 128, -256);
         do Memory.poke(memAddress + 160, -256);
         do Memory.poke(memAddress + 192, -256);
         do Memory.poke(memAddress + 224, -1);
         do Memory.poke(memAddress + 256, -1);
         do Memory.poke(memAddress + 288, -1);
         do Memory.poke(memAddress + 320, -1);
         do Memory.poke(memAddress + 352, 0);
         do Memory.poke(memAddress + 384, 0);
         do Memory.poke(memAddress + 416, 0);
         do Memory.poke(memAddress + 448, 0);
         do Memory.poke(memAddress + 480, 0);
      }
      else
      {
         do Memory.poke(memAddress + 0, 0);
         do Memory.poke(memAddress + 32,0);
         do Memory.poke(memAddress + 64,0);
         do Memory.poke(memAddress + 96,0);
         do Memory.poke(memAddress + 128,0);
         do Memory.poke(memAddress + 160,0);
         do Memory.poke(memAddress + 192,0);
         do Memory.poke(memAddress + 224,0);
         do Memory.poke(memAddress + 256,0);
         do Memory.poke(memAddress + 288,0);
         do Memory.poke(memAddress + 320,0);
         do Memory.poke(memAddress + 352,0);
         do Memory.poke(memAddress + 384,0);
         do Memory.poke(memAddress + 416,0);
         do Memory.poke(memAddress + 448,0);
         do Memory.poke(memAddress + 480,0);
      }
      let memAddress = temp + 512;
      let temp = memAddress;
      if (show) {
         do Memory.poke(memAddress + 0, 0);
         do Memory.poke(memAddress + 32, 0);
         do Memory.poke(memAddress + 64, 0);
         do Memory.poke(memAddress + 96, 0);
         do Memory.poke(memAddress + 128, 0);
         do Memory.poke(memAddress + 160, 0);
         do Memory.poke(memAddress + 192, 512);
         do Memory.poke(memAddress + 224, 1792);
         do Memory.poke(memAddress + 256, 3968);
         do Memory.poke(memAddress + 288, 8064);
         do Memory.poke(memAddress + 320, 16128);
         do Memory.poke(memAddress + 352, 32256);
         do Memory.poke(memAddress + 384, -2048);
         do Memory.poke(memAddress + 416, -4096);
         do Memory.poke(memAddress + 448, -8192);
         do Memory.poke(memAddress + 480, -16384);
      }
      else
      {
         do Memory.poke(memAddress + 0, 0);
         do Memory.poke(memAddress + 32,0);
         do Memory.poke(memAddress + 64,0);
         do Memory.poke(memAddress + 96,0);
         do Memory.poke(memAddress + 128,0);
         do Memory.poke(memAddress + 160,0);
         do Memory.poke(memAddress + 192,0);
         do Memory.poke(memAddress + 224,0);
         do Memory.poke(memAddress + 256,0);
         do Memory.poke(memAddress + 288,0);
         do Memory.poke(memAddress + 320,0);
         do Memory.poke(memAddress + 352,0);
         do Memory.poke(memAddress + 384,0);
         do Memory.poke(memAddress + 416,0);
         do Memory.poke(memAddress + 448,0);
         do Memory.poke(memAddress + 480,0);
      }
      let memAddress = temp + 512;
      let temp = memAddress;
      if (show) {
         do Memory.poke(memAddress + 0, 7);
         do Memory.poke(memAddress + 32, 15);
         do Memory.poke(memAddress + 64, 31);
         do Memory.poke(memAddress + 96, 63);
         do Memory.poke(memAddress + 128, 126);
         do Memory.poke(memAddress + 160, 252);
         do Memory.poke(memAddress + 192, 496);
         do Memory.poke(memAddress + 224, 992);
         do Memory.poke(memAddress + 256, 960);
         do Memory.poke(memAddress + 288, 896);
         do Memory.poke(memAddress + 320, 0);
         do Memory.poke(memAddress + 352, 0);
         do Memory.poke(memAddress + 384, 0);
         do Memory.poke(memAddress + 416, 0);
         do Memory.poke(memAddress + 448, 0);
         do Memory.poke(memAddress + 480, 0);
      }
      else
      {
         do Memory.poke(memAddress + 0, 0);
         do Memory.poke(memAddress + 32,0);
         do Memory.poke(memAddress + 64,0);
         do Memory.poke(memAddress + 96,0);
         do Memory.poke(memAddress + 128,0);
         do Memory.poke(memAddress + 160,0);
         do Memory.poke(memAddress + 192,0);
         do Memory.poke(memAddress + 224,0);
         do Memory.poke(memAddress + 256,0);
         do Memory.poke(memAddress + 288,0);
         do Memory.poke(memAddress + 320,0);
         do Memory.poke(memAddress + 352,0);
         do Memory.poke(memAddress + 384,0);
         do Memory.poke(memAddress + 416,0);
         do Memory.poke(memAddress + 448,0);
         do Memory.poke(memAddress + 480,0);
      }
      let memAddress = temp + 512;
      let temp = memAddress;
      if (show) {
         do Memory.poke(memAddress + 0, -1);
         do Memory.poke(memAddress + 32, -1);
         do Memory.poke(memAddress + 64, -1);
         do Memory.poke(memAddress + 96, -1);
         do Memory.poke(memAddress + 128, -1);
         do Memory.poke(memAddress + 160, -1);
         do Memory.poke(memAddress + 192, -1);
         do Memory.poke(memAddress + 224, -1);
         do Memory.poke(memAddress + 256, -1);
         do Memory.poke(memAddress + 288, -1);
         do Memory.poke(memAddress + 320, -1);
         do Memory.poke(memAddress + 352, -1);
         do Memory.poke(memAddress + 384, -1);
         do Memory.poke(memAddress + 416, -1);
         do Memory.poke(memAddress + 448, -1);
         do Memory.poke(memAddress + 480, -1);
      }
      else
      {
         do Memory.poke(memAddress + 0, 0);
         do Memory.poke(memAddress + 32,0);
         do Memory.poke(memAddress + 64,0);
         do Memory.poke(memAddress + 96,0);
         do Memory.poke(memAddress + 128,0);
         do Memory.poke(memAddress + 160,0);
         do Memory.poke(memAddress + 192,0);
         do Memory.poke(memAddress + 224,0);
         do Memory.poke(memAddress + 256,0);
         do Memory.poke(memAddress + 288,0);
         do Memory.poke(memAddress + 320,0);
         do Memory.poke(memAddress + 352,0);
         do Memory.poke(memAddress + 384,0);
         do Memory.poke(memAddress + 416,0);
         do Memory.poke(memAddress + 448,0);
         do Memory.poke(memAddress + 480,0);
      }
      let memAddress = temp + 512;
      let temp = memAddress;
      if (show) {
         do Memory.poke(memAddress + 0, 511);
         do Memory.poke(memAddress + 32, 511);
         do Memory.poke(memAddress + 64, 511);
         do Memory.poke(memAddress + 96, 511);
         do Memory.poke(memAddress + 128, 511);
         do Memory.poke(memAddress + 160, 511);
         do Memory.poke(memAddress + 192, 511);
         do Memory.poke(memAddress + 224, 511);
         do Memory.poke(memAddress + 256, 0);
         do Memory.poke(memAddress + 288, 0);
         do Memory.poke(memAddress + 320, 0);
         do Memory.poke(memAddress + 352, 0);
         do Memory.poke(memAddress + 384, 0);
         do Memory.poke(memAddress + 416, 0);
         do Memory.poke(memAddress + 448, 0);
         do Memory.poke(memAddress + 480, 0);
      }
      else
      {
         do Memory.poke(memAddress + 0, 0);
         do Memory.poke(memAddress + 32,0);
         do Memory.poke(memAddress + 64,0);
         do Memory.poke(memAddress + 96,0);
         do Memory.poke(memAddress + 128,0);
         do Memory.poke(memAddress + 160,0);
         do Memory.poke(memAddress + 192,0);
         do Memory.poke(memAddress + 224,0);
         do Memory.poke(memAddress + 256,0);
         do Memory.poke(memAddress + 288,0);
         do Memory.poke(memAddress + 320,0);
         do Memory.poke(memAddress + 352,0);
         do Memory.poke(memAddress + 384,0);
         do Memory.poke(memAddress + 416,0);
         do Memory.poke(memAddress + 448,0);
         do Memory.poke(memAddress + 480,0);
      }

      // q
      let memAddress = 16384;
      let memAddress = memAddress + ((y+4) * 512) + x - 1 + cutoff;
      do print(memAddress, show);
      let memAddress = memAddress - 1 + 512;
      do print(memAddress, show);
      let memAddress = memAddress + 1;
      let temp = memAddress;
      if (show) {
         do Memory.poke(memAddress + 0, 0);
         do Memory.poke(memAddress + 32, 0);
         do Memory.poke(memAddress + 64, 0);
         do Memory.poke(memAddress + 96, 0);
         do Memory.poke(memAddress + 128, 0);
         do Memory.poke(memAddress + 160, 0);
         do Memory.poke(memAddress + 192, 512);
         do Memory.poke(memAddress + 224, 1792);
         do Memory.poke(memAddress + 256, 3968);
         do Memory.poke(memAddress + 288, 8064);
         do Memory.poke(memAddress + 320, 16128);
         do Memory.poke(memAddress + 352, 32256);
         do Memory.poke(memAddress + 384, -2048);
         do Memory.poke(memAddress + 416, -4096);
         do Memory.poke(memAddress + 448, -8192);
         do Memory.poke(memAddress + 480, -16384);
      }
      else
      {
         do Memory.poke(memAddress + 0, 0);
         do Memory.poke(memAddress + 32,0);
         do Memory.poke(memAddress + 64,0);
         do Memory.poke(memAddress + 96,0);
         do Memory.poke(memAddress + 128,0);
         do Memory.poke(memAddress + 160,0);
         do Memory.poke(memAddress + 192,0);
         do Memory.poke(memAddress + 224,0);
         do Memory.poke(memAddress + 256,0);
         do Memory.poke(memAddress + 288,0);
         do Memory.poke(memAddress + 320,0);
         do Memory.poke(memAddress + 352,0);
         do Memory.poke(memAddress + 384,0);
         do Memory.poke(memAddress + 416,0);
         do Memory.poke(memAddress + 448,0);
         do Memory.poke(memAddress + 480,0);
      }
      let memAddress = temp + 512;
      do print(memAddress, show);
      let memAddress = memAddress + 1 - 512;
      do print(memAddress, show);
      let memAddress = memAddress + 512;
      if (show) {
         do Memory.poke(memAddress + 0, 7);
         do Memory.poke(memAddress + 32, 15);
         do Memory.poke(memAddress + 64, 31);
         do Memory.poke(memAddress + 96, 63);
         do Memory.poke(memAddress + 128, 126);
         do Memory.poke(memAddress + 160, 252);
         do Memory.poke(memAddress + 192, 496);
         do Memory.poke(memAddress + 224, 992);
         do Memory.poke(memAddress + 256, 960);
         do Memory.poke(memAddress + 288, 896);
         do Memory.poke(memAddress + 320, 0);
         do Memory.poke(memAddress + 352, 0);
         do Memory.poke(memAddress + 384, 0);
         do Memory.poke(memAddress + 416, 0);
         do Memory.poke(memAddress + 448, 0);
         do Memory.poke(memAddress + 480, 0);
      }
      else
      {
         do Memory.poke(memAddress + 0, 0);
         do Memory.poke(memAddress + 32,0);
         do Memory.poke(memAddress + 64,0);
         do Memory.poke(memAddress + 96,0);
         do Memory.poke(memAddress + 128,0);
         do Memory.poke(memAddress + 160,0);
         do Memory.poke(memAddress + 192,0);
         do Memory.poke(memAddress + 224,0);
         do Memory.poke(memAddress + 256,0);
         do Memory.poke(memAddress + 288,0);
         do Memory.poke(memAddress + 320,0);
         do Memory.poke(memAddress + 352,0);
         do Memory.poke(memAddress + 384,0);
         do Memory.poke(memAddress + 416,0);
         do Memory.poke(memAddress + 448,0);
         do Memory.poke(memAddress + 480,0);
      }

      //U
      let memAddress = 16384;
      let memAddress = memAddress + ((y+4) * 512) + x - 1 + 3 + cutoff;
      do print(memAddress, show);
      let memAddress = memAddress + 512;
      do print(memAddress, show);
      let memAddress = memAddress + 512;
      do print(memAddress, show);
      let memAddress = memAddress + 1;
      do print(memAddress, show);
      let memAddress = memAddress + 1;
      do print(memAddress, show);
      let memAddress = memAddress - 512;
      do print(memAddress, show);
      let memAddress = memAddress - 512;
      do print(memAddress, show);

      //E
      let memAddress = 16384;
      let memAddress = memAddress + ((y+4) * 512) + x - 1 + 7 + cutoff;
      do print(memAddress, show);
      let memAddress = memAddress + 512;
      do print(memAddress, show);
      let memAddress = memAddress + 512;
      do print(memAddress, show);
      let memAddress = memAddress + 1;
      let temp = memAddress;
      if (show) {
         do Memory.poke(memAddress + 0, 0);
         do Memory.poke(memAddress + 32, 0);
         do Memory.poke(memAddress + 64, 0);
         do Memory.poke(memAddress + 96, 0);
         do Memory.poke(memAddress + 128, 0);
         do Memory.poke(memAddress + 160, 0);
         do Memory.poke(memAddress + 192, 0);
         do Memory.poke(memAddress + 224, 0);
         do Memory.poke(memAddress + 256, 0);
         do Memory.poke(memAddress + 288, -1);
         do Memory.poke(memAddress + 320, -1);
         do Memory.poke(memAddress + 352, -1);
         do Memory.poke(memAddress + 384, -1);
         do Memory.poke(memAddress + 416, -1);
         do Memory.poke(memAddress + 448, -1);
         do Memory.poke(memAddress + 480, -1);
      }
      else
      {
         do Memory.poke(memAddress + 0, 0);
         do Memory.poke(memAddress + 32,0);
         do Memory.poke(memAddress + 64,0);
         do Memory.poke(memAddress + 96,0);
         do Memory.poke(memAddress + 128,0);
         do Memory.poke(memAddress + 160,0);
         do Memory.poke(memAddress + 192,0);
         do Memory.poke(memAddress + 224,0);
         do Memory.poke(memAddress + 256,0);
         do Memory.poke(memAddress + 288,0);
         do Memory.poke(memAddress + 320,0);
         do Memory.poke(memAddress + 352,0);
         do Memory.poke(memAddress + 384,0);
         do Memory.poke(memAddress + 416,0);
         do Memory.poke(memAddress + 448,0);
         do Memory.poke(memAddress + 480,0);
      }
      let memAddress = temp - 512;
      let temp = memAddress;
      if (show) {
         do Memory.poke(memAddress + 0, 0);
         do Memory.poke(memAddress + 32, 0);
         do Memory.poke(memAddress + 64, 0);
         do Memory.poke(memAddress + 96, 0);
         do Memory.poke(memAddress + 128, 0);
         do Memory.poke(memAddress + 160, -1);
         do Memory.poke(memAddress + 192, -1);
         do Memory.poke(memAddress + 224, -1);
         do Memory.poke(memAddress + 256, -1);
         do Memory.poke(memAddress + 288, -1);
         do Memory.poke(memAddress + 320, -1);
         do Memory.poke(memAddress + 352, 0);
         do Memory.poke(memAddress + 384, 0);
         do Memory.poke(memAddress + 416, 0);
         do Memory.poke(memAddress + 448, 0);
         do Memory.poke(memAddress + 480, 0);
      }
      else
      {
         do Memory.poke(memAddress + 0, 0);
         do Memory.poke(memAddress + 32,0);
         do Memory.poke(memAddress + 64,0);
         do Memory.poke(memAddress + 96,0);
         do Memory.poke(memAddress + 128,0);
         do Memory.poke(memAddress + 160,0);
         do Memory.poke(memAddress + 192,0);
         do Memory.poke(memAddress + 224,0);
         do Memory.poke(memAddress + 256,0);
         do Memory.poke(memAddress + 288,0);
         do Memory.poke(memAddress + 320,0);
         do Memory.poke(memAddress + 352,0);
         do Memory.poke(memAddress + 384,0);
         do Memory.poke(memAddress + 416,0);
         do Memory.poke(memAddress + 448,0);
         do Memory.poke(memAddress + 480,0);
      }
      let memAddress = temp - 512;
      if (show) {
         do Memory.poke(memAddress + 0, -1);
         do Memory.poke(memAddress + 32, -1);
         do Memory.poke(memAddress + 64, -1);
         do Memory.poke(memAddress + 96, -1);
         do Memory.poke(memAddress + 128, -1);
         do Memory.poke(memAddress + 160, -1);
         do Memory.poke(memAddress + 192, -1);
         do Memory.poke(memAddress + 224, 0);
         do Memory.poke(memAddress + 256, 0);
         do Memory.poke(memAddress + 288, 0);
         do Memory.poke(memAddress + 320, 0);
         do Memory.poke(memAddress + 352, 0);
         do Memory.poke(memAddress + 384, 0);
         do Memory.poke(memAddress + 416, 0);
         do Memory.poke(memAddress + 448, 0);
         do Memory.poke(memAddress + 480, 0);
      }
      else
      {
         do Memory.poke(memAddress + 0, 0);
         do Memory.poke(memAddress + 32,0);
         do Memory.poke(memAddress + 64,0);
         do Memory.poke(memAddress + 96,0);
         do Memory.poke(memAddress + 128,0);
         do Memory.poke(memAddress + 160,0);
         do Memory.poke(memAddress + 192,0);
         do Memory.poke(memAddress + 224,0);
         do Memory.poke(memAddress + 256,0);
         do Memory.poke(memAddress + 288,0);
         do Memory.poke(memAddress + 320,0);
         do Memory.poke(memAddress + 352,0);
         do Memory.poke(memAddress + 384,0);
         do Memory.poke(memAddress + 416,0);
         do Memory.poke(memAddress + 448,0);
         do Memory.poke(memAddress + 480,0);
      }

      //S
      let memAddress = 16384;
      let memAddress = memAddress + ((y+4) * 512) + x - 1 + 10 + cutoff;
      let temp = memAddress;
      if (show) {
         do Memory.poke(memAddress + 0, 0);
         do Memory.poke(memAddress + 32, 0);
         do Memory.poke(memAddress + 64, 0);
         do Memory.poke(memAddress + 96, 0);
         do Memory.poke(memAddress + 128, 0);
         do Memory.poke(memAddress + 160, 0);
         do Memory.poke(memAddress + 192, 0);
         do Memory.poke(memAddress + 224, 0);
         do Memory.poke(memAddress + 256, -128);
         do Memory.poke(memAddress + 288, -128);
         do Memory.poke(memAddress + 320, -128);
         do Memory.poke(memAddress + 352, -128);
         do Memory.poke(memAddress + 384, -128);
         do Memory.poke(memAddress + 416, -128);
         do Memory.poke(memAddress + 448, -128);
         do Memory.poke(memAddress + 480, -128);
      }
      else
      {
         do Memory.poke(memAddress + 0, 0);
         do Memory.poke(memAddress + 32,0);
         do Memory.poke(memAddress + 64,0);
         do Memory.poke(memAddress + 96,0);
         do Memory.poke(memAddress + 128,0);
         do Memory.poke(memAddress + 160,0);
         do Memory.poke(memAddress + 192,0);
         do Memory.poke(memAddress + 224,0);
         do Memory.poke(memAddress + 256,0);
         do Memory.poke(memAddress + 288,0);
         do Memory.poke(memAddress + 320,0);
         do Memory.poke(memAddress + 352,0);
         do Memory.poke(memAddress + 384,0);
         do Memory.poke(memAddress + 416,0);
         do Memory.poke(memAddress + 448,0);
         do Memory.poke(memAddress + 480,0);
      }
      let memAddress = temp + 1;
      let temp = memAddress;
      if (show) {
         do Memory.poke(memAddress + 0, -1);
         do Memory.poke(memAddress + 32, -1);
         do Memory.poke(memAddress + 64, -1);
         do Memory.poke(memAddress + 96, -1);
         do Memory.poke(memAddress + 128, -1);
         do Memory.poke(memAddress + 160, -1);
         do Memory.poke(memAddress + 192, -1);
         do Memory.poke(memAddress + 224, -1);
         do Memory.poke(memAddress + 256, 0);
         do Memory.poke(memAddress + 288, 0);
         do Memory.poke(memAddress + 320, 0);
         do Memory.poke(memAddress + 352, 0);
         do Memory.poke(memAddress + 384, 0);
         do Memory.poke(memAddress + 416, 0);
         do Memory.poke(memAddress + 448, 0);
         do Memory.poke(memAddress + 480, 0);
      }
      else
      {
         do Memory.poke(memAddress + 0, 0);
         do Memory.poke(memAddress + 32,0);
         do Memory.poke(memAddress + 64,0);
         do Memory.poke(memAddress + 96,0);
         do Memory.poke(memAddress + 128,0);
         do Memory.poke(memAddress + 160,0);
         do Memory.poke(memAddress + 192,0);
         do Memory.poke(memAddress + 224,0);
         do Memory.poke(memAddress + 256,0);
         do Memory.poke(memAddress + 288,0);
         do Memory.poke(memAddress + 320,0);
         do Memory.poke(memAddress + 352,0);
         do Memory.poke(memAddress + 384,0);
         do Memory.poke(memAddress + 416,0);
         do Memory.poke(memAddress + 448,0);
         do Memory.poke(memAddress + 480,0);
      }
      let memAddress = memAddress + 1;
      let temp = memAddress;
      if (show) {
         do Memory.poke(memAddress + 0, 0);
         do Memory.poke(memAddress + 32, 0);
         do Memory.poke(memAddress + 64, 0);
         do Memory.poke(memAddress + 96, 0);
         do Memory.poke(memAddress + 128, 0);
         do Memory.poke(memAddress + 160, 0);
         do Memory.poke(memAddress + 192, 0);
         do Memory.poke(memAddress + 224, 0);
         do Memory.poke(memAddress + 256, 511);
         do Memory.poke(memAddress + 288, 511);
         do Memory.poke(memAddress + 320, 511);
         do Memory.poke(memAddress + 352, 511);
         do Memory.poke(memAddress + 384, 511);
         do Memory.poke(memAddress + 416, 511);
         do Memory.poke(memAddress + 448, 511);
         do Memory.poke(memAddress + 480, 511);
      }
      else
      {
         do Memory.poke(memAddress + 0, 0);
         do Memory.poke(memAddress + 32,0);
         do Memory.poke(memAddress + 64,0);
         do Memory.poke(memAddress + 96,0);
         do Memory.poke(memAddress + 128,0);
         do Memory.poke(memAddress + 160,0);
         do Memory.poke(memAddress + 192,0);
         do Memory.poke(memAddress + 224,0);
         do Memory.poke(memAddress + 256,0);
         do Memory.poke(memAddress + 288,0);
         do Memory.poke(memAddress + 320,0);
         do Memory.poke(memAddress + 352,0);
         do Memory.poke(memAddress + 384,0);
         do Memory.poke(memAddress + 416,0);
         do Memory.poke(memAddress + 448,0);
         do Memory.poke(memAddress + 480,0);
      }

      let memAddress = temp -1 + 512;
      let temp = memAddress;
      if (show) {
         do Memory.poke(memAddress + 0, 7);
         do Memory.poke(memAddress + 32, 15);
         do Memory.poke(memAddress + 64, 31);
         do Memory.poke(memAddress + 96, 127);
         do Memory.poke(memAddress + 128, 254);
         do Memory.poke(memAddress + 160, 504);
         do Memory.poke(memAddress + 192, 1008);
         do Memory.poke(memAddress + 224, 2016);
         do Memory.poke(memAddress + 256, 4032);
         do Memory.poke(memAddress + 288, 8064);
         do Memory.poke(memAddress + 320, 16128);
         do Memory.poke(memAddress + 352, 32256);
         do Memory.poke(memAddress + 384, -2048);
         do Memory.poke(memAddress + 416, -4096);
         do Memory.poke(memAddress + 448, -8192);
         do Memory.poke(memAddress + 480, -16384);
      }
      else
      {
         do Memory.poke(memAddress + 0, 0);
         do Memory.poke(memAddress + 32,0);
         do Memory.poke(memAddress + 64,0);
         do Memory.poke(memAddress + 96,0);
         do Memory.poke(memAddress + 128,0);
         do Memory.poke(memAddress + 160,0);
         do Memory.poke(memAddress + 192,0);
         do Memory.poke(memAddress + 224,0);
         do Memory.poke(memAddress + 256,0);
         do Memory.poke(memAddress + 288,0);
         do Memory.poke(memAddress + 320,0);
         do Memory.poke(memAddress + 352,0);
         do Memory.poke(memAddress + 384,0);
         do Memory.poke(memAddress + 416,0);
         do Memory.poke(memAddress + 448,0);
         do Memory.poke(memAddress + 480,0);
      }
      let memAddress = temp -1 + 512;
      let temp = memAddress;
      if (show) {
         do Memory.poke(memAddress + 0, -128);
         do Memory.poke(memAddress + 32, -128);
         do Memory.poke(memAddress + 64, -128);
         do Memory.poke(memAddress + 96, -128);
         do Memory.poke(memAddress + 128, -128);
         do Memory.poke(memAddress + 160, -128);
         do Memory.poke(memAddress + 192, -128);
         do Memory.poke(memAddress + 224, -128);
         do Memory.poke(memAddress + 256, 0);
         do Memory.poke(memAddress + 288, 0);
         do Memory.poke(memAddress + 320, 0);
         do Memory.poke(memAddress + 352, 0);
         do Memory.poke(memAddress + 384, 0);
         do Memory.poke(memAddress + 416, 0);
         do Memory.poke(memAddress + 448, 0);
         do Memory.poke(memAddress + 480, 0);
      }
      else
      {
         do Memory.poke(memAddress + 0, 0);
         do Memory.poke(memAddress + 32,0);
         do Memory.poke(memAddress + 64,0);
         do Memory.poke(memAddress + 96,0);
         do Memory.poke(memAddress + 128,0);
         do Memory.poke(memAddress + 160,0);
         do Memory.poke(memAddress + 192,0);
         do Memory.poke(memAddress + 224,0);
         do Memory.poke(memAddress + 256,0);
         do Memory.poke(memAddress + 288,0);
         do Memory.poke(memAddress + 320,0);
         do Memory.poke(memAddress + 352,0);
         do Memory.poke(memAddress + 384,0);
         do Memory.poke(memAddress + 416,0);
         do Memory.poke(memAddress + 448,0);
         do Memory.poke(memAddress + 480,0);
      }
      let memAddress = temp + 1;
      let temp = memAddress;
      if (show) {
         do Memory.poke(memAddress + 0, 0);
         do Memory.poke(memAddress + 32, 0);
         do Memory.poke(memAddress + 64, 0);
         do Memory.poke(memAddress + 96, 0);
         do Memory.poke(memAddress + 128, 0);
         do Memory.poke(memAddress + 160, 0);
         do Memory.poke(memAddress + 192, 0);
         do Memory.poke(memAddress + 224, 0);
         do Memory.poke(memAddress + 256, -1);
         do Memory.poke(memAddress + 288, -1);
         do Memory.poke(memAddress + 320, -1);
         do Memory.poke(memAddress + 352, -1);
         do Memory.poke(memAddress + 384, -1);
         do Memory.poke(memAddress + 416, -1);
         do Memory.poke(memAddress + 448, -1);
         do Memory.poke(memAddress + 480, -1);
      }
      else
      {
         do Memory.poke(memAddress + 0, 0);
         do Memory.poke(memAddress + 32,0);
         do Memory.poke(memAddress + 64,0);
         do Memory.poke(memAddress + 96,0);
         do Memory.poke(memAddress + 128,0);
         do Memory.poke(memAddress + 160,0);
         do Memory.poke(memAddress + 192,0);
         do Memory.poke(memAddress + 224,0);
         do Memory.poke(memAddress + 256,0);
         do Memory.poke(memAddress + 288,0);
         do Memory.poke(memAddress + 320,0);
         do Memory.poke(memAddress + 352,0);
         do Memory.poke(memAddress + 384,0);
         do Memory.poke(memAddress + 416,0);
         do Memory.poke(memAddress + 448,0);
         do Memory.poke(memAddress + 480,0);
      }
      let memAddress = memAddress + 1;
      if (show) {
         do Memory.poke(memAddress + 0, 511);
         do Memory.poke(memAddress + 32, 511);
         do Memory.poke(memAddress + 64, 511);
         do Memory.poke(memAddress + 96, 511);
         do Memory.poke(memAddress + 128, 511);
         do Memory.poke(memAddress + 160, 511);
         do Memory.poke(memAddress + 192, 511);
         do Memory.poke(memAddress + 224, 511);
         do Memory.poke(memAddress + 256, 0);
         do Memory.poke(memAddress + 288, 0);
         do Memory.poke(memAddress + 320, 0);
         do Memory.poke(memAddress + 352, 0);
         do Memory.poke(memAddress + 384, 0);
         do Memory.poke(memAddress + 416, 0);
         do Memory.poke(memAddress + 448, 0);
         do Memory.poke(memAddress + 480, 0);
      }
      else
      {
         do Memory.poke(memAddress + 0, 0);
         do Memory.poke(memAddress + 32,0);
         do Memory.poke(memAddress + 64,0);
         do Memory.poke(memAddress + 96,0);
         do Memory.poke(memAddress + 128,0);
         do Memory.poke(memAddress + 160,0);
         do Memory.poke(memAddress + 192,0);
         do Memory.poke(memAddress + 224,0);
         do Memory.poke(memAddress + 256,0);
         do Memory.poke(memAddress + 288,0);
         do Memory.poke(memAddress + 320,0);
         do Memory.poke(memAddress + 352,0);
         do Memory.poke(memAddress + 384,0);
         do Memory.poke(memAddress + 416,0);
         do Memory.poke(memAddress + 448,0);
         do Memory.poke(memAddress + 480,0);
      }

      // t
      let memAddress = 16384;
      let memAddress = memAddress + ((y+4) * 512) + x - 1 + 14 + cutoff;
      do print(memAddress, show);
      let memAddress = memAddress + 1;
      do print(memAddress, show);
      let memAddress = memAddress + 1;
      do print(memAddress, show);
      let memAddress = memAddress - 1 + 512;
      do print(memAddress, show);
      let memAddress = memAddress + 512;
      do print(memAddress, show);

      return;
   }

   method void print(int memAddress, boolean show)
   {
      if (show)
      {
         do Memory.poke(memAddress + 0, -1);
         do Memory.poke(memAddress + 32, -1);
         do Memory.poke(memAddress + 64, -1);
         do Memory.poke(memAddress + 96, -1);
         do Memory.poke(memAddress + 128, -1);
         do Memory.poke(memAddress + 160, -1);
         do Memory.poke(memAddress + 192, -1);
         do Memory.poke(memAddress + 224, -1);
         do Memory.poke(memAddress + 256, -1);
         do Memory.poke(memAddress + 288, -1);
         do Memory.poke(memAddress + 320, -1);
         do Memory.poke(memAddress + 352, -1);
         do Memory.poke(memAddress + 384, -1);
         do Memory.poke(memAddress + 416, -1);
         do Memory.poke(memAddress + 448, -1);
         do Memory.poke(memAddress + 480, -1);
      }
      else
      {
         do Memory.poke(memAddress + 0, 0);
         do Memory.poke(memAddress + 32, 0);
         do Memory.poke(memAddress + 64, 0);
         do Memory.poke(memAddress + 96, 0);
         do Memory.poke(memAddress + 128, 0);
         do Memory.poke(memAddress + 160, 0);
         do Memory.poke(memAddress + 192, 0);
         do Memory.poke(memAddress + 224, 0);
         do Memory.poke(memAddress + 256, 0);
         do Memory.poke(memAddress + 288, 0);
         do Memory.poke(memAddress + 320, 0);
         do Memory.poke(memAddress + 352, 0);
         do Memory.poke(memAddress + 384, 0);
         do Memory.poke(memAddress + 416, 0);
         do Memory.poke(memAddress + 448, 0);
         do Memory.poke(memAddress + 480, 0);
      }
      return;
   }

   method void startScreen() // returns the randomizer value
   {
      var Rd tempRd;     
      var int t, key;

      do printGameName(8, 1, true, 0);
      do printGameName(8, 1, false, -128);
      do printGameName(8, 1, true, -256);

      // while(~Keyboard.keyPressed()) {
      //    do Sys.wait(50);
      // }

      if(isFirstTime)
      {
         do tempRd.seed(3812);

         do Output.moveCursor(12, 10);
         let randomizer = Keyboard.readInt("Rate your day in the scale of 1-1000> ");
         let randomizer = randomizer + Rd.mod( tempRd.between(123,391, tempRd.buffer( 229+randomizer+2912 , 50 , 150 )), 4972);

         let t = Keyboard.readInt("Enter time (24 hrs format) (Warning!! spooky stuff ahead!)> ");
         let t = t*60;
         let t = t + Rd.mod(tempRd.between(2933, 2391 , tempRd.buffer(t, t+549, t+1024)), 2829);

         let randomizer = randomizer + t;

         let max_death = 1; //Rd.mod(tempRd.between(1,randomizer, 923), 100);

         let isFirstTime = false;
         do Screen.clearScreen();
         do Output.moveCursor(2, 0);
         do Output.printString("Life had been falling apart for a while... work, health, and everything in between. All sorts of pressure kept building around me, and I kept breaking, quietly, trying to make it through. But, one night, it became too much. I couldn't think logically anymore. The decisions taken in anger or sorrow are wrong 99 percent of the time and in the remaining 1%, they were never truly yours to make. A man's greatest sin is the ignorance of his own knowledge. I am no god... but again my mind wasn't in right place either. Somewhere during that haze, I drifted into this dreamlike realm... a place that felt peaceful, yet eerily endless. It was beautiful, surreal ... but there was no way back. At start, it was soft and merciful but now it is dangerous and torturing not to mention there is this dark entity chasing me constantly making me turn into a spirit but somewhere along the way... I could not see it anymore.");
         do Output.moveCursor(22, 18);
         do Output.printString("Press Enter to start the game...");
         
      }
      else
      {
         do Output.moveCursor(13, 14);
         do Output.printString("Press Enter to start the game...");
      }

      let key = 0;   

      // wait for the enter key to be pressed
      while(~(key = 128)) {
         let key = Keyboard.keyPressed();         
      }
      
      // wait enter key to be released
      while(~(key = 0)) {
         let key = Keyboard.keyPressed();         
      }

      return;
   }

   method void start()
   {
      // var Rd tempRd;     
      // var int t;

      var Platform platform; // the starting platform
      var Platform curPlatform; // to be used when day/night mode is switched
      var Player player; //initialize the player
      var char key; // To store the key pressed by the user

      // prerequisites for the game
      do reset();

      // defining platform and player
      let platform = Platform.new(5, 15, 26, dispDir, moveDir);
      let player = Player.new(5, 14);

      // drawing for the start screen
      do Player.draw(true);
      do platform.draw(false);

      do startScreen();
      
      // do tempRd.seed(3812);

      // let randomizer = Keyboard.readInt("Enter some random digits (seed)> ");
      // let randomizer = randomizer + tempRd.mod( tempRd.between(123,391, tempRd.buffer( 229+randomizer+2912 , 50 , 150 )), 4972);

      // let t = Keyboard.readInt("Enter time (24 hrs format)> ");
      // let t = t*60;
      // let t = t + tempRd.mod(tempRd.between(2933, 2391 , tempRd.buffer(t, t+549, t+1024)), 2829);

      // let randomizer = randomizer + t;

      //do tempRd.dispose();
      do Screen.clearScreen();

      do player.dispose();
      let player = Player.new(5, 13);
      do Player.draw(true);
      do platform.draw(false);

      while (~exit)
      {
         // waits for a key to be pressed.
         // update screen and move platform
         while ((key = 0) & (~exit)) {

            // game over if player has fallen off the screen
            if ((player.c_ypos_d() > 14) | (player.c_ypos_d() < 1)| (player.c_xpos_d() > 30) | (player.c_xpos_d() < 1))
            {
               let exit = true;
            }

            // Switch between day and night mode
            if (dayNightTimer = 0) 
            {
               let dayNightTimer = dayNightDelay;
               let isDay = ~isDay;
               if (~isDay) {
                  do Screen.setColor(true);
               } else {
                  do Screen.setColor(false);
               }
               do Screen.drawRectangle(0,0,511,255);

               // redraw the platforms in the current day/night mode
               let curPlatform = Platform.getFirst();
               while(curPlatform.hasNext()) //draw the platforms except last
               {
                  do curPlatform.draw(false);
                  let curPlatform = curPlatform.getNext();
               }

               do curPlatform.draw(false); // draw the last platform

            } 
            else {
               let dayNightTimer = dayNightTimer - 1;
            }

            //* Stimulate time
            do player.stimulate_time();

            // Handle user inputs

            let key = Keyboard.keyPressed();

            do handlePlatform();
            do Player.draw(true);
            do updateTime();
            do showTime(timePassed, 0, 0);
            do Sys.wait(delay);
         }
         
         if ( key = 32 & ~player.is_jumping() ) // jump when space is pressed and player is not already jumping
         {
            // todo: perform player jump when space key is pressed

            if (player.has_surface()) {

               do player.set_jumping_height(5);
               do player.jump();

            }
         }
         else 
         {
            if (key = 140) { let exit = true; } // exit when esc is pressed
            else {
               if (key = 70) {
                  //* Key: F

                  do player.dash();

               } else {
                  
                  if ( (key = 68) & ~player.has_gravity_cooldown()) {
                     //* Key: D

                     do Player.set_gravity_direction(3);
                     do player.set_gravity_cooldown();
                     
                  } else {

                     if ( (key = 65) & ~player.has_gravity_cooldown()) {
                        //* Key: A

                        do Player.set_gravity_direction(4);
                        do player.set_gravity_cooldown();

                     } else {

                        if ( (key = 87) & ~player.has_gravity_cooldown() ) {
                           
                           //* Key: W
                           
                           do Player.set_gravity_direction(2);
                           do player.set_gravity_cooldown();

                        } else {

                           if ((key = 83) & ~player.has_gravity_cooldown()) {

                              //* Key: S

                              do Player.set_gravity_direction(1);
                              do player.set_gravity_cooldown();

                           } else {
                              if (key = 84) { //* T
                                 do player.slow_time();
                              } else {
                                 if (key = 82) { //* R
                                    do player.summon_ground_ability();
                                 }
                              }
                           }

                        }

                     }

                  }

               }
            }
         }

         // Waits for the key to be released.
         // update screen and move platform
         while ((~(key = 0)) & (~exit)) {
               let key = Keyboard.keyPressed();
               do handlePlatform();
               do updateTime();
               do showTime(timePassed, 0, 0);
               do Sys.wait(delay);
         }
      }

      // Game over scene
      if (exit) {
         let max_death = max_death -1;

         if (max_death = 0) {

            //* Cutscene starts here.
            let shouldRestart = false;
            do Platform.disposeAll();
            do Cutscene.start();

         } else {

            do Screen.clearScreen();
            do Platform.disposeAll();
            do Output.moveCursor(10,27);
            do Output.printString("Game Over");
            do Output.moveCursor(11,27);
            do showTime(timePassed, 11, 27);
            if(timePassed > hTimePassed)
            {
               let hTimePassed = timePassed;
            }
            do Output.moveCursor(12,27);
            do Output.printString("Highest Time: ");
            do showTime(hTimePassed, 12, 35);

            do Output.moveCursor(13,27);
            do Output.printString("Restart (y/N): ");

            let key = 0;   

            // wait for the key to be pressed
            while(key = 0) {
               let key = Keyboard.keyPressed();         
            }
            
            // check if the user wants to restart the game
            if (~(key = 89)) {
               let shouldRestart = false;
            }

            // wait for the key to be released
            while (~(key = 0)) {
               let key = Keyboard.keyPressed();
            }
         }
      }

      return;
   }

   //note: uncommment it if there is change in gravity direction config in Player class
   // // get the current direction of the platform from the gravity direction
   // method int getCurDirFromGravity(int g_dir)
   // {
   //    if (g_dir = 1)
   //    {
   //       return 1;
   //    }
   //    else
   //    {
   //       if (g_dir = 2)
   //       {
   //          return 2;
   //       }
   //       else
   //       {
   //          if (g_dir = 3)
   //          {
   //             return 3;
   //          }
   //          else
   //          {
   //             return 4;
   //          }
   //       }
   //    }
   // }

   method void updateTime()
   {
      let nFrame = nFrame + 1;
      if (nFrame > ((1000/delay) - 2))
      {
         let nFrame = 0;
         let timePassed = timePassed + 1;
      }
      return;
   }

   method void showTime(int seconds, int x, int y)
   {
      var int sec, min, hour;
      let hour = seconds / 3600;
      let min = (Rd.mod(seconds, 3600)) / 60;
      let sec = Rd.mod((Rd.mod(seconds, 3600)), 60);

      do Output.moveCursor(x, y);
      do Output.printString("Time: ");
      do Output.printInt(hour);
      do Output.printString(":");
      do Output.printInt(min);
      do Output.printString(":");
      do Output.printInt(sec);
      do Output.printString("  ");
      return;
   }

   // control the movement and procedural generation of the platform
   method void handlePlatform()
   {
      var Platform curPlatform, nextplatform, p1, p2;
      var int x,y,l,rand,curDir;

      let curDir = Player.get_gravity_direction(); //get the current direction of the gravity

      // change the direction of the platform if the gravity direction has changed
      if (~(moveDir = curDir))   
      {
         do Platform.disposeAll();

         //render BG acoording to the day/night mode
         if (~isDay)
         {
            do Screen.setColor(true);       
         }
         else
         {
            do Screen.setColor(false);
         }
         do Screen.drawRectangle(0,0,511,255);

         let moveDir = curDir;
         let dispDir = curDir;

         // construct predefinied initial platforms based on the direction of the gravity
         if (curDir = 1)
         {
            let p1 =  Platform.new(15, 15, 5, dispDir, moveDir);            
            let p2 = Platform.new(22, 15, 5, dispDir, moveDir);         
         }
         else
         {
            if (curDir = 2)
            {
               let p1 =  Platform.new(15, 7, 5, dispDir, moveDir);            
               let p2 = Platform.new(7, 8, 5, dispDir, moveDir);         
            }
            else
            {
               if (curDir = 3)
               {
                  let p1 =  Platform.new(15, 8, 5, dispDir, moveDir);            
                  let p2 = Platform.new(15, 15, 5, dispDir, moveDir);         
               }
               else
               {
                  let p1 =  Platform.new(15, 2, 5, dispDir, moveDir);
                  let p2 = Platform.new(15, 10, 5, dispDir, moveDir);
               }
            }
         }
         
         // draw those initial platforms
         do p1.draw(false);
         do p2.draw(false);
         return;
      }
      
      let curPlatform = Platform.getFirst();
      
      while(curPlatform.hasNext()) //update the position of all the platforms except last
      {
         do curPlatform.move();
         let curPlatform = curPlatform.getNext();
      }

      do curPlatform.move(); // update the position of the last platform

      //note: uncomment below if individual platform testing is required
      // return;
      
      // generate a new platform if the last platform has fully entered the scene
      if(curPlatform.hasFullyEnteredScene()) 
      {
         let rand = Random.between(0, 10); //0-4 -> spawn down or spawn left, 5-9 -> spawn up or spawn right
         let l = Random.between(3, 8);
         if (moveDir < 3) //if the direction is forward or backward (0-4 -> spawn down, 5-9 -> spawn up)
         {          
            if (rand < 5)
            {
               if((curPlatform.getY() + spawnDiff) > (15 - baseHeight))
               {
                  let y = curPlatform.getY() - spawnDiff;
               }
               else
               {
                  let y = curPlatform.getY() + spawnDiff;
               }
            }
            else
            {
               if((curPlatform.getY() - spawnDiff) < 2)
               {
                  let y = curPlatform.getY() + spawnDiff;
               }
               else
               {
                  let y = curPlatform.getY() - spawnDiff;
               }
            }           

            if (moveDir = 1)
            {
               let x = 32;
            }
            else
            {
               let x = -1 - l;
            }
         }
         else //if the direction is up or down (0-4 -> spawn left, 5-9 -> spawn right)
         {
            if (rand < 5)
               {
                  if((curPlatform.getX() - spawnDiff) < 3)
                  {
                     let x = curPlatform.getX() + spawnDiff;
                  }
                  else
                  {
                     let x = curPlatform.getX() - spawnDiff;
                  }
               }
               else
               {
                  if((curPlatform.getX() + spawnDiff) > (29 - baseWidth))
                  {
                     let x = curPlatform.getX() - spawnDiff;
                  }
                  else
                  {
                     let x = curPlatform.getX() + spawnDiff;
                  }
               }           

               if (moveDir = 3)
               {
                  let y = 16;
               }
               else
               {
                  let y = -1 - l;
               }
         }

         //do Output.printInt(2);
         do Platform.new(x, y, l, dispDir, moveDir);   
      }

      let curPlatform = Platform.getFirst();

      // Remove the platforms that has exited the screen
      if(curPlatform.hasExittedScreen())
      {
         //do Output.printInt(1);
         do curPlatform.dispose();
      }

      return;
   }

   method void dispose()
   {
      do Memory.deAlloc(this);
      return;
   }
}


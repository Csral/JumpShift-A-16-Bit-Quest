//note: A class must have atleast one field var, otherwisw it gives 'Allocated memory size must be postivie' error
//important: screen size: 512x256
//important: axis - x: 0-31, y: 0-15
//important: dir - 1 - forward, 2 - backward, 3 - up, 4 - down

//note: if println() not displaying, then try commenting Screen.clearScreen() in Platform.draw() method
class GameController
{
   static int moveDir;       // direction of the motion
   static int dispDir;       // direction in which the upcoming platforms must be displayed
   static int delay;           //wait time between each frame
   static int randomizer;
   static boolean isDay;   // true if the game is in day mode
   static boolean shouldRestart; // true if the game should restart

   field boolean exit;       // true when the game is over
   field int spawnDiff;      // difference between the y position of the current platform and the next platform
   field int baseHeight;     // buffer height to be maintained between the platform and the screen boundary when forward or backward
   field int baseWidth;     // buffer width to be maintained between the platform and the screen boundary when up or down

   field int dayNightTimer;  // timer to switch between day and night mode
   field int dayNightDelay;  // delay between each switch between day and night mode   


   constructor GameController new()
   {
      // let delay = 50;
      // let moveDir = 1;
      // let dispDir = 1;
      // let spawnDiff = 2;
      // let randomizer = 2912;
      // let baseHeight = 3;
      // let baseWidth = 5;
      // let isDay = true;
      // let dayNightDelay = 15;
      // let dayNightTimer = dayNightDelay;
      // let shouldRestart = true;
      do reset();
      return this;
   }

   method void reset()
   {
      let delay = 50;
      let moveDir = 1;
      let dispDir = 1;
      let spawnDiff = 2;
      let randomizer = 2912;
      let baseHeight = 3;
      let baseWidth = 5;
      let isDay = true;
      let dayNightDelay = 15;
      let dayNightTimer = dayNightDelay;
      let shouldRestart = true;
      let exit = false;
      do Screen.clearScreen();
      do Output.moveCursor(0,0);
      return;
   }

   function boolean getIsDay()
   {
      return isDay;
   }

   function boolean getShouldRestart()
   {
      return shouldRestart;
   }

   method void setDelay(int d)
   {
      let delay = d;
      return;
   }

   method int random(int x, int y)
   {
      var Rd rd;
      // do Random.seed(Memory.peek(Random.between(16384, 24577) + Memory.peek(0)));
      // do Random.seed(Memory.peek(rd.between(16384, 24577, 0) + Memory.peek(0)));
      // return Random.between(x, y);
      return rd.between(x, y, 0);
   }

   function int get_randomizer() {
      return randomizer;
   }

   method void start()
   {
      var Rd tempRd;     
      var int t;

      var Platform platform; // the starting platform
      var Platform curPlatform; // to be used when day/night mode is switched
      var Player player; //initialize the player
      var char key; // To store the key pressed by the user

      // prerequisites for the game
      do reset();
      
      let randomizer = Keyboard.readInt("Enter some random digits (seed)> ");
      let randomizer = randomizer + tempRd.mod( tempRd.between(123,391, tempRd.buffer( 229+randomizer+2912 , 50 , 150 )), 4972);

      let t = Keyboard.readInt("Enter time (24 hrs format)> ");
      let t = t*60;
      let t = t + tempRd.mod(tempRd.between(2933, 2391 , tempRd.buffer(t, t+549, t+1024)), 2829);

      let randomizer = randomizer + t;

      //do tempRd.dispose();
      do Screen.clearScreen();

      //TODO: implement the start config of platform and player
      let platform = Platform.new(5, 15, 26, dispDir, moveDir);
      let player = Player.new(5, 13);
      do player.draw(true);
      do platform.draw(false);

      while (~exit)
      {
         // waits for a key to be pressed.
         // update screen and move platform
         while ((key = 0) & (~exit)) {

            // game over if player has fallen off the screen
            if ((player.c_ypos_d() > 14) | (player.c_xpos_d() > 30) | (player.c_xpos_d() < 0))
            {
               let exit = true;
            }

            // Switch between day and night mode
            if (dayNightTimer = 0) 
            {
               let dayNightTimer = dayNightDelay;
               let isDay = ~isDay;
               if (~isDay) {
                  do Screen.setColor(true);
               } else {
                  do Screen.setColor(false);
               }
               do Screen.drawRectangle(0,0,511,255);

               // redraw the platforms in the current day/night mode
               let curPlatform = Platform.getFirst();
               while(curPlatform.hasNext()) //draw the platforms except last
               {
                  do curPlatform.draw(false);
                  let curPlatform = curPlatform.getNext();
               }

               do curPlatform.draw(false); // draw the last platform

            } 
            else {
               let dayNightTimer = dayNightTimer - 1;
            }

            //* Stimulate time
            do player.stimulate_time();

            // Handle user inputs

            let key = Keyboard.keyPressed();

            do handlePlatform();
            do player.draw(true);
            do Sys.wait(50);
         }
         
         if ( key = 32 & ~player.is_jumping() ) // jump when space is pressed and player is not already jumping
         {
            // todo: perform player jump when space key is pressed

            if (player.has_surface()) {

               do player.set_jumping_height(5);
               do player.jump();

            }
         }
         else 
         {
            if (key = 140) { let exit = true; } // exit when esc is pressed
            else {
               if (key = 70) {
                  //* Key: F

                  do player.dash();

               } else {
                  
                  if ( (key = 68) & ~player.has_gravity_cooldown()) {
                     //* Key: D

                     do Player.set_gravity_direction(3);
                     do player.set_gravity_cooldown();
                     
                  } else {

                     if ( (key = 65) & ~player.has_gravity_cooldown()) {
                        //* Key: A

                        do Player.set_gravity_direction(4);
                        do player.set_gravity_cooldown();

                     } else {

                        if ( (key = 87) & ~player.has_gravity_cooldown() ) {
                           
                           //* Key: W
                           
                           do Player.set_gravity_direction(2);
                           do player.set_gravity_cooldown();

                        } else {

                           if ((key = 83) & ~player.has_gravity_cooldown()) {

                              //* Key: S

                              do Player.set_gravity_direction(1);
                              do player.set_gravity_cooldown();

                           }

                        }

                     }

                  }

               }
            }
         }

         // Waits for the key to be released.
         // update screen and move platform
         while ((~(key = 0)) & (~exit)) {
               let key = Keyboard.keyPressed();
               do handlePlatform();
               do Sys.wait(50);
         }
      }

      // Game over scene
      if (exit) {
         do Screen.clearScreen();
         do Platform.disposeAll();
         do Output.moveCursor(10,27);
         do Output.printString("Game Over");
         do Output.moveCursor(11,27);
         do Output.printString("Restart (y/N): ");  
         let key = 0;   

         while(key = 0) {
            let key = Keyboard.keyPressed();         
         }
         
         if (~(key = 89)) {
            let shouldRestart = false;
         }

         do Sys.wait(100); // waut till the system refreshes its keyboard memory
      }

      return;
   }

   //note: uncommment it if there is change in gravity direction config in Player class
   // // get the current direction of the platform from the gravity direction
   // method int getCurDirFromGravity(int g_dir)
   // {
   //    if (g_dir = 1)
   //    {
   //       return 1;
   //    }
   //    else
   //    {
   //       if (g_dir = 2)
   //       {
   //          return 2;
   //       }
   //       else
   //       {
   //          if (g_dir = 3)
   //          {
   //             return 3;
   //          }
   //          else
   //          {
   //             return 4;
   //          }
   //       }
   //    }
   // }

   // control the movement and procedural generation of the platform
   method void handlePlatform()
   {
      var Platform curPlatform, nextplatform, p1, p2;
      var int x,y,l,rand,curDir;

      let curDir = Player.get_gravity_direction(); //get the current direction of the gravity

      // change the direction of the platform if the gravity direction has changed
      if (~(moveDir = curDir))   
      {
         do Platform.disposeAll();

         //render BG acoording to the day/night mode
         if (~isDay)
         {
            do Screen.setColor(true);       
         }
         else
         {
            do Screen.setColor(false);
         }
         do Screen.drawRectangle(0,0,511,255);

         let moveDir = curDir;
         let dispDir = curDir;

         // construct predefinied initial platforms based on the direction of the gravity
         if (curDir = 1)
         {
            let p1 =  Platform.new(15, 15, 5, dispDir, moveDir);            
            let p2 = Platform.new(22, 15, 5, dispDir, moveDir);         
         }
         else
         {
            if (curDir = 2)
            {
               let p1 =  Platform.new(15, 15, 5, dispDir, moveDir);            
               let p2 = Platform.new(7, 15, 5, dispDir, moveDir);         
            }
            else
            {
               if (curDir = 3)
               {
                  let p1 =  Platform.new(15, 8, 5, dispDir, moveDir);            
                  let p2 = Platform.new(15, 15, 5, dispDir, moveDir);         
               }
               else
               {
                  let p1 =  Platform.new(15, 2, 5, dispDir, moveDir);
                  let p2 = Platform.new(15, 10, 5, dispDir, moveDir);
               }
            }
         }
         
         // draw those initial platforms
         do p1.draw(false);
         do p2.draw(false);
         return;
      }
      
      let curPlatform = Platform.getFirst();
      
      while(curPlatform.hasNext()) //update the position of all the platforms except last
      {
         do curPlatform.move();
         let curPlatform = curPlatform.getNext();
      }

      do curPlatform.move(); // update the position of the last platform

      //note: uncomment below if individual platform testing is required
      // return;
      
      // generate a new platform if the last platform has fully entered the scene
      if(curPlatform.hasFullyEnteredScene()) 
      {
         let rand = Random.between(0, 10); //0-4 -> spawn down or spawn left, 5-9 -> spawn up or spawn right
         let l = Random.between(3, 8);
         if (moveDir < 3) //if the direction is forward or backward (0-4 -> spawn down, 5-9 -> spawn up)
         {          
            if (rand < 5)
            {
               if((curPlatform.getY() + spawnDiff) > (15 - baseHeight))
               {
                  let y = curPlatform.getY() - spawnDiff;
               }
               else
               {
                  let y = curPlatform.getY() + spawnDiff;
               }
            }
            else
            {
               if((curPlatform.getY() - spawnDiff) < 2)
               {
                  let y = curPlatform.getY() + spawnDiff;
               }
               else
               {
                  let y = curPlatform.getY() - spawnDiff;
               }
            }           

            if (moveDir = 1)
            {
               let x = 32;
            }
            else
            {
               let x = -1 - l;
            }
         }
         else //if the direction is up or down (0-4 -> spawn left, 5-9 -> spawn right)
         {
            if (rand < 5)
               {
                  if((curPlatform.getX() - spawnDiff) < 3)
                  {
                     let x = curPlatform.getX() + spawnDiff;
                  }
                  else
                  {
                     let x = curPlatform.getX() - spawnDiff;
                  }
               }
               else
               {
                  if((curPlatform.getX() + spawnDiff) > (29 - baseWidth))
                  {
                     let x = curPlatform.getX() - spawnDiff;
                  }
                  else
                  {
                     let x = curPlatform.getX() + spawnDiff;
                  }
               }           

               if (moveDir = 3)
               {
                  let y = 16;
               }
               else
               {
                  let y = -1 - l;
               }
         }

         //do Output.printInt(2);
         do Platform.new(x, y, l, dispDir, moveDir);   
      }

      let curPlatform = Platform.getFirst();

      // Remove the platforms that has exited the screen
      if(curPlatform.hasExittedScreen())
      {
         //do Output.printInt(1);
         do curPlatform.dispose();
      }

      return;
   }

   method void dispose()
   {
      do Memory.deAlloc(this);
      return;
   }
}
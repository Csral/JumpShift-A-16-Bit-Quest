//important:screen size: 512x256
//important: axis - x: 0-31, y: 0-15
//important: dir(as felt by user) - 1 - forward(plat -> left), 2 - backward(plat -> right), 3 - up(plat -> down), 4 - down(plat -> up)
//important: sprite - 16x16 - https://arieljannai.gitlab.io/Nand2TetrisBitmapEditor/
//done: created platform draw, move, dispose methods
//done: created platform Que, random length and position generation
class Platform
{
    // platform Que variables
    static Platform first; //first element in the Que
    static Platform last; //last element in the Que
    static int queSize; //size of the Que

    field Platform next; //next element after this element

    // platform variables
    field int length;      // length of the platform
    field int x;           // x position of the platform
    field int y;           // y position of the platform
    field int dispDir;        //display direction of the platform
    field int moveDir;        //move direction of the platform
    field int gap;        //gap between the platforms
    
    constructor Platform new(int x1, int y1, int l, int d, int m)
    {
        let x = x1;
        let y = y1;
        let dispDir = d;
        let moveDir = m;
        let gap = 3;
        let length = l;

        let next = null; //initialize next to null
        if (queSize = 0) // handle first element case
        {
            let first = this;
            let last = this;
        }
        else // update the last element in que to point to this element
        {
            do last.setNext(this);
            let last = this;
        }
        let queSize = queSize + 1;

        return this;
    }

    // getters and setters
    function Platform getFirst()
    {
        return first;
    }

    method void renderForwardBackwardToMemory(int memAddress, boolean day)
    {
        if(day)
        {
            do Memory.poke(memAddress + 0, -1);
            do Memory.poke(memAddress + 32, -1);
            do Memory.poke(memAddress + 64, -1);
            do Memory.poke(memAddress + 96, -1);
            do Memory.poke(memAddress + 128, -1);
            do Memory.poke(memAddress + 160, -1);
            do Memory.poke(memAddress + 192, -1);
            do Memory.poke(memAddress + 224, -1);
            do Memory.poke(memAddress + 256, -1);
            do Memory.poke(memAddress + 288, -1);
            do Memory.poke(memAddress + 320, -1);
            do Memory.poke(memAddress + 352, -1);
            do Memory.poke(memAddress + 384, -1);
            do Memory.poke(memAddress + 416, -1);
            do Memory.poke(memAddress + 448, -1);
            do Memory.poke(memAddress + 480, -1);
        }
        else
        {
            do Memory.poke(memAddress + 0, 0);
            do Memory.poke(memAddress + 32, 0);
            do Memory.poke(memAddress + 64, 0);
            do Memory.poke(memAddress + 96, 0);
            do Memory.poke(memAddress + 128, 0);
            do Memory.poke(memAddress + 160, 0);
            do Memory.poke(memAddress + 192, 0);
            do Memory.poke(memAddress + 224, 0);
            do Memory.poke(memAddress + 256, 0);
            do Memory.poke(memAddress + 288, 0);
            do Memory.poke(memAddress + 320, 0);
            do Memory.poke(memAddress + 352, 0);
            do Memory.poke(memAddress + 384, 0);
            do Memory.poke(memAddress + 416, 0);
            do Memory.poke(memAddress + 448, 0);
            do Memory.poke(memAddress + 480, 0);
        }
        return;
    }

    method void renderUpDownToMemory(int memAddress, boolean day)
    {
        if(day)
        {
            do Memory.poke(memAddress + 0, -1);
            do Memory.poke(memAddress + 32, -1);
            do Memory.poke(memAddress + 64, -1);
            do Memory.poke(memAddress + 96, -1);
            do Memory.poke(memAddress + 128, -1);
            do Memory.poke(memAddress + 160, -1);
            do Memory.poke(memAddress + 192, -1);
            do Memory.poke(memAddress + 224, -1);
            do Memory.poke(memAddress + 256, -1);
            do Memory.poke(memAddress + 288, -1);
            do Memory.poke(memAddress + 320, -1);
            do Memory.poke(memAddress + 352, -1);
            do Memory.poke(memAddress + 384, -1);
            do Memory.poke(memAddress + 416, -1);
            do Memory.poke(memAddress + 448, -1);
            do Memory.poke(memAddress + 480, -1);
        }
        else
        {
            do Memory.poke(memAddress + 0, 0);
            do Memory.poke(memAddress + 32, 0);
            do Memory.poke(memAddress + 64, 0);
            do Memory.poke(memAddress + 96, 0);
            do Memory.poke(memAddress + 128, 0);
            do Memory.poke(memAddress + 160, 0);
            do Memory.poke(memAddress + 192, 0);
            do Memory.poke(memAddress + 224, 0);
            do Memory.poke(memAddress + 256, 0);
            do Memory.poke(memAddress + 288, 0);
            do Memory.poke(memAddress + 320, 0);
            do Memory.poke(memAddress + 352, 0);
            do Memory.poke(memAddress + 384, 0);
            do Memory.poke(memAddress + 416, 0);
            do Memory.poke(memAddress + 448, 0);
            do Memory.poke(memAddress + 480, 0);
        }
        return;
    }

    function Platform getLast()
    {
        return last;
    }

    method int getY()
    {
        return y;
    }

    method int getX()
    {
        return x;
    }

    method void setNext(Platform p)
    {
        let next = p;
        return;
    }

    method Platform getNext()
    {
        return next;
    }

    // memeber functions
    method boolean hasNext() // check if platform is linked to another platform
    {
        if (next = null)
        {
            return false;
        }
        return true;
    }

    method boolean hasFullyEnteredScene() // check if the platform has fully entered the scene with specified gap
    {
        var int bound;
        let bound = x + length;
        if (moveDir = 1) // for direction forwards
        {
            if ((bound + gap) < 32)
            {
                return true;
            }
            return false;
        }
        if (moveDir = 2) // for direction backwards
        {
            if ((bound - gap) > 0)
            {
                return true;
            }
            return false;
        }
        let bound = y + length;
        if (moveDir = 3) // for direction up
        {
            if ((bound + gap) < 16)
            {
                return true;
            }
            return false;
        }
        if ((bound - gap) > 0) // for direction down
        {
            return true;
        }
        return false;
    }

    method boolean hasExittedScreen() //check if the platfrom has exitted the scene
    {
        var int bound;
        let bound = x + length;
        if (moveDir = 1) // for direction forwards
        {
            if (bound < 0)
            {
                return true;
            }
            return false;
        }
        if (moveDir = 2) // for direction backwards
        {
            if (x > 32)
            {
                return true;
            }
            return false;
        }
        if (moveDir = 4) // for direction down
        {
            if (y > 16)
            {
                return true;
            }
            return false;
        }
        let bound = y + length;
        if (bound < 0) // for direction up
        {
            return true;
        }
        return false;
    }

    // draw the platform object
    method void draw(boolean show, boolean isPersistant)
    {
		var int memAddress, i, loc, len;
        let i = 0;
        let len = length;
        // calculate the memory address from the x and y position
        let loc = (y * 512) + x; // 32*16 = 512
        // handle the platform going out of bounds
        if (x<0) //handle left right out of bounds
        {
            if (dispDir < 3)
            {
                let len = len + x;
                // recalculate the memory address from the x and y position
                let loc = (y * 512); // 32*16 = 512
            }
            else
            {
                // do Output.printString("<");
                // do Output.printInt(moveDir);
                // do Output.printInt(dispDir);
                // do Output.printString(" ");
                return;
            }
        }
        else
        {
            if (dispDir < 3)
            {
                if ((x+len) > 31)
                {
                    let len = 32 - x;
                }
            }
            else
            {
                if(x > 31)
                {
                    // do Output.printString(">");
                    return;
                }
            }
        }
    
        if (y<0) // handle top bottom out of bounds
        {
            if (dispDir > 2)
            {
                let len = len + y;
                // recalculate the memory address from the x and y position
                let loc = x;
            }
            else
            {
                // do Output.printString("^");
                return;
            }
        }
        else
        {
            if (dispDir > 2)
            {
                if ((y+len) > 15)
                {
                    let len = 16 - y;
                }
            }
            else
            {
                if(y > 15)
                {
                    // do Output.printString("low");
                    return;
                }
            }
        }
        if (len < 0)//1
        {
            return;
        }
        
		let memAddress = 16384 + loc;

        // to draw the whole block
        if(~isPersistant)
        {
            // draw the sprite till the length
            while(i < len)
            {
                // if (show)
                // {
                if(GameController.getIsDay())// day sprite rendering
                {
                    if (dispDir < 3) //forward or backward sprite rendering
                    {
                        do renderForwardBackwardToMemory(memAddress, true);
                    }
                    else //up or down sprite rendering
                    {
                        do renderUpDownToMemory(memAddress, true);
                    }
                }
                else //night sprite rendering
                {
                    //todo: change the no. when night sprite is ready
                    if (dispDir < 3) //forward or backward sprite rendering
                    {
                        do renderForwardBackwardToMemory(memAddress, false);
                    }
                    else //up or down sprite rendering
                    {
                        do renderUpDownToMemory(memAddress, false);
                    }
                }
                // }
                // else //clear the sprite
                // {
                //     do Memory.poke(memAddress + 0, 0);
                //     do Memory.poke(memAddress + 32, 0);
                //     do Memory.poke(memAddress + 64, 0);
                //     do Memory.poke(memAddress + 96, 0);
                //     do Memory.poke(memAddress + 128, 0);
                //     do Memory.poke(memAddress + 160, 0);
                //     do Memory.poke(memAddress + 192, 0);
                //     do Memory.poke(memAddress + 224, 0);
                //     do Memory.poke(memAddress + 256, 0);
                //     do Memory.poke(memAddress + 288, 0);
                //     do Memory.poke(memAddress + 320, 0);
                //     do Memory.poke(memAddress + 352, 0);
                //     do Memory.poke(memAddress + 384, 0);
                //     do Memory.poke(memAddress + 416, 0);
                //     do Memory.poke(memAddress + 448, 0);
                //     do Memory.poke(memAddress + 480, 0);
                // }
                if (dispDir < 3)
                {
                    let memAddress = memAddress + 1;
                }
                else
                {
                    let memAddress = memAddress + 512;
                }
                let i = i + 1;
            }
        }
        else
        {
            // render only the next frame's first block
            if (dispDir < 3) //forward or backward sprite rendering
            {
                if (dispDir = 2)
                {
                    let memAddress = memAddress + len - 1;
                }
                
                if(GameController.getIsDay()) // day sprite rendering forward or backward
                {
                    do renderForwardBackwardToMemory(memAddress, true);
                }
                else//night sprite rendering forward or backword //todo: change the no. when night sprite is ready
                {
                    do renderForwardBackwardToMemory(memAddress, false);
                }
            }
            else //up or down sprite rendering
            {
                if (dispDir = 3)
                {

                }
                else
                {
                    let memAddress = memAddress + (512*(len-1));
                }

                if ((memAddress < 16384) | (memAddress > 24096))
                {
                    // do Output.printString("ROB");
                    // do Output.printInt(memAddress);
                    // do Output.printString(" ");

                    return;
                }


                if(GameController.getIsDay()) // day sprite rendering up or down
                {
                    do renderUpDownToMemory(memAddress, true);
                }
                else //night sprite rendering up or down //todo: change the no. when night sprite is ready
                {
                    do renderUpDownToMemory(memAddress, false);
                }
            }

            // calculate the memory address for the prevoius frame's last block
            if (dispDir = 1)
            {
                let memAddress = memAddress + len;
            }
            if(dispDir = 2)
            {
                let memAddress = memAddress - len;
            }
            if (dispDir = 3)
            {
                let memAddress = memAddress + (512*(len));            
            }
            if(dispDir = 4)
            {
                let memAddress = memAddress - (512*(len));
            }
            if ((memAddress < 16384) | (memAddress > 24096))
            {
                // do Output.printString("EOB");
                // do Output.printInt(memAddress);
                // do Output.printString(" ");

                return;
            }

            //clear the the prevoius frame's last block
            //todo: change the no. when night sprite is ready
            if(GameController.getIsDay()) // night sprite rendering
            {
                if(dispDir < 3) // forward or backword
                {            
                    do renderForwardBackwardToMemory(memAddress, false);
                }
                else // up or down
                {
                    do renderUpDownToMemory(memAddress, false);
                }
            }
            else // day sprite rendering
            {
                if (dispDir < 3) //forward or backward sprite rendering
                {
                    do renderForwardBackwardToMemory(memAddress, true);
                }
                else //up or down sprite rendering
                {
                    do renderUpDownToMemory(memAddress, true);
                }
            }            
        }
		return;
	}

    // move the platform object
    method void move()
    {
        do draw(false, true);
        if(moveDir = 1) //forward
        {
            let x = x - 1;
        }
        else
        {
            if(moveDir = 2) // backward
            {
                let x = x + 1;
            }
            else
            {
                if(moveDir = 3) //up
                {
                    let y = y - 1;
                }
                else
                {
                    if(moveDir = 4) //down
                    {
                        let y = y + 1;
                    }
                }
            }
        }
        do draw(true, true);
        return;
    }

    // delete the platform object
    method void dispose() 
    {
        if (first = this)
        {
            let first = next;
            let queSize = queSize - 1;
            do Memory.deAlloc(this);
        }
        return;
    }

    // delete all the platform objects from the queue
    function void disposeAll()
    {
        while(~(first = null))
        {
            do first.dispose();
        }
        return;
    } 
}
//todo: implement player class
class Player
{
    static int gravity_direction, uptime, ground_level;
    field int xpos, ypos, jump_height, dash_cooldown, gravity_cooldown; // player's x and y position
    field boolean is_on_surface;
    field Rd rand;

    static int rotation; //* Degree rotation! (Only effects drawing, i.e., draw() )
    
    field int timer; //* Timer to update gravity
    field int g_dir, g_n1_count; //* Gravity direction, no. of times gravity went without 1.

    /*
        * 1: down
        * 2: up
        * 3: right
        * 4: left
    */

    constructor Player new(int x, int y)
    {
        let xpos = x;
        let ypos = y;
        let gravity_direction = 1;
        let is_on_surface = true;
        let dash_cooldown = 0; //* Can use dash
        let timer = rand.between(10,60, c_ypos_d() + rand.between(12,22,18) ) + rand.between(10,60, c_ypos_d() + rand.between(22,42,86) ) ;
        let g_dir = 1;
        let g_n1_count = 0;
        let uptime = 0;
        let gravity_cooldown = 0;
        let ground_level = 15;

        do rand.seed(7978);

        let rotation = 0; //* Normal

        return this;
    }

    method int c_xpos_d() {
        return xpos;
    }

    method int c_ypos_d() {
        return ypos;
    }

    method void dispose()
    {
        do Memory.deAlloc(this);
        return;
    }

    method void update(int x, int y) {

        let xpos = x;
        let ypos = y;
        return;

    }

    method void set_jumping_height(int h) {
        let jump_height = h;
        return;
    }

    method boolean is_jumping() {
        return (jump_height>0);
    }

    ///// changed from method to function by rtamanyu /////////////////////
    function void set_gravity_direction(int dir) {

        if ( (dir < 5) & (dir > 0) ) {
            let gravity_direction = dir;
        }

        if (dir = 1) {
            let ground_level = 15;
            let rotation = 0;
        } else {
            if (dir = 2) {
                let ground_level = 0;
                let rotation = 1801;
            } else {
                if (dir = 3) {
                    let ground_level = 31;
                    let rotation = 2700;
                } else {
                    if (dir = 4) {
                        let ground_level = 0; 
                        let rotation = 2701; //* Vertical mirror + 270 deg.
                    }
                }
            }
        }

        return;

    }

    function int get_gravity_direction() {
        return gravity_direction;
    }
    // I change it so that it can be used in other classes
    ///////////////////////////////////////////////////////////

    method void enforce_gravity() {

        var int looper;

        if (gravity_direction = 1) {

            let looper = ground_level - ypos; //* How high is the player and drop him per 200 ms.

            if (looper > 0) {

                do draw(false);
                do update(xpos, ypos+1);
                do draw(true);

                do Sys.wait(20);

                let looper = ground_level - ypos;
                let is_on_surface = false;

            } else {
                let is_on_surface = true;
            }

        } else {
            if (gravity_direction = 2) {

                let looper = ypos - ground_level; //* How high is the player and drop him per 200 ms.

                if (looper > 0) {

                    do draw(false);
                    do update(xpos, ypos-1);
                    do draw(true);

                    do Sys.wait(20);

                    let looper = ypos - ground_level;

                    let is_on_surface = false;

                } else {
                    let is_on_surface = true;
                }
            
            } else {
                
                if (gravity_direction = 3) {

                    let looper = ground_level - xpos; //* How high is the player and drop him per 200 ms.

                    if (looper > 0) {

                        do draw(false);
                        do update(xpos+1, ypos);
                        do draw(true);

                        do Sys.wait(20);

                        let looper = ground_level - xpos;

                        let is_on_surface = false;

                    } else {
                        let is_on_surface = true;
                    }

                } else { //* Assumes 4 by default unless there is some fault in code

                    let looper = xpos - ground_level; //* How high is the player and drop him per 200 ms.

                    if (looper > 0) {

                        do draw(false);
                        do update(xpos-1, ypos);
                        do draw(true);

                        do Sys.wait(20);

                        let looper = xpos - ground_level;

                        let is_on_surface = false;

                    } else {
                        let is_on_surface = true;
                    }

                }

            }
        }

        return;
    }


    method boolean on_ground() {

        var boolean result;

        if (gravity_direction = 1) {
            let result = (ypos = ground_level);  // Store comparison result
        } else {

            if ( gravity_direction = 2) {
                let result = (ypos = ground_level);
            } else {

                if (gravity_direction = 3) {
                    let result = (xpos = ground_level);  // Store comparison result
                } else {
                    if (gravity_direction = 4) {
                        let result = (xpos = ground_level);
                    }
                }
            }

        }

        return result;

    }

    method void collision() { //* Invoked at every jump

        /*
            
            * Where do i get platform coords?

        */

        var int under; //* address of under median

        if (gravity_direction = 1) {

            //* Median is xpos + 1 / 2.
            if (ypos < 15) {
                let under = ( 16384 + ( (ypos) * 512) + ( xpos + 1 ) ) + 512;

                if (GameController.getIsDay()) {

                    if (~(Memory.peek(under) = 0)) {

                        let ground_level = ypos;
                        let is_on_surface = true;

                        do set_jumping_height(0);

                        return;
                    
                    } else {
                        let ground_level = 15;
                    }

                } else {
                    
                    if ((Memory.peek(under) = 0)) {

                        let ground_level = ypos;
                        let is_on_surface = true;
                        do set_jumping_height(0);
                        return;
                    
                    } else {
                        let ground_level = 15;
                    }

                }
            }

        } else {

            if (gravity_direction = 2) {

                if (ypos > 0) {
                    let under = ( 16384 + ( (ypos) * 512) + ( xpos + 1 ) ) - 512;

                    if (GameController.getIsDay()) {

                        if (~(Memory.peek(under) = 0)) {

                            let ground_level = ypos;
                            let is_on_surface = true;
                            do set_jumping_height(0);
                            return;
                        
                        } else {
                            let ground_level = 0;
                        }

                    } else {

                        if ((Memory.peek(under) = 0)) {

                            let ground_level = ypos;
                            let is_on_surface = true;
                            do set_jumping_height(0);
                            return;
                        
                        } else {
                            let ground_level = 0;
                        }

                    }
                }

            } else {

                if (gravity_direction = 3) {

                    if (xpos < 31) {
                        let under = ( 16384 + ( (ypos) * 512) + ( xpos ) ) + 257;

                        if (GameController.getIsDay()) {

                            if (~(Memory.peek(under) = 0)) {
                                let ground_level = xpos;
                                let is_on_surface = true;
                                do set_jumping_height(0);
                                return;
                            
                            } else {
                                let ground_level = 31;
                            }

                        } else {

                            if ((Memory.peek(under) = 0)) {
                                let ground_level = xpos;
                                let is_on_surface = true;
                                do set_jumping_height(0);
                                return;
                            
                            } else {
                                let ground_level = 31;
                            }

                        }
                    }

                } else {

                    if (gravity_direction = 4) {

                        if (xpos > 0) {
                            let under = ( 16384 + ( (ypos) * 512) + ( xpos ) ) - 257;

                            if (GameController.getIsDay()) {

                                if (~(Memory.peek(under) = 0)) {
                                    let ground_level = xpos;
                                    let is_on_surface = true;
                                    do set_jumping_height(0);
                                    return;
                                
                                } else {
                                    let ground_level = 0;
                                }

                            } else {
                                if ((Memory.peek(under) = 0)) {
                                    let ground_level = xpos;
                                    let is_on_surface = true;
                                    do set_jumping_height(0);
                                    return;
                                
                                } else {
                                    let ground_level = 0;
                                }
                            }
                        }

                    }

                }

            }

        }

        return;

    }

    method boolean has_surface() {

        if (on_ground()) {
            return true;
        } else {
            if (jump_height > 0) {
                return false;
            } else {
                //* Assumes collision system to handle everything!
                return is_on_surface;
            }
        }
        
    }

    function int get_time() {
        return uptime;
    }

    method boolean has_gravity_cooldown() {
        return (gravity_cooldown > 0);
    }

    method void set_gravity_cooldown() {

        let gravity_cooldown = 10200;
        return;
    }

    method void stimulate_time() {

        /*

            * Game controller calls this function every time it loops.
            * Each loop has a delay of 50 ms.
            * 1000 ms = 1s.
            * So 20 loop rotations of game controller = 1 second irl.
            * So for 10 seconds cooldown, 10000 ms should become 0 in 200 rotation.
            * So each rotation should cut out 10000/200 => 100/2 => 50 ms.

        */

        /* 

            * Randomly change gravity
            * At a randomly generated time

        */

        if (uptime > 13000) {
            let uptime = 9;
        }

        let uptime = uptime + 1;

        if (timer = 0) {
            let timer = rand.between(10,60, c_ypos_d() + rand.between(12,22,18) ) + rand.between(10,60, c_ypos_d() + rand.between(22,42,86) ) ;
            let g_dir = rand.between(1,4, c_xpos_d());

            if (~(g_dir = 1)) {
                if (g_n1_count > 4) {
                    let g_dir = 1;
                    let g_n1_count = 0;
                } else {
                    let g_n1_count = g_n1_count + 1;
                }
            } else {
                let g_n1_count = 0;
            }
            do Player.set_gravity_direction(g_dir);
        } else {
            let timer = timer - 1;
        }

        if (~on_ground()) {
            if (~is_jumping()) {
                do enforce_gravity();
            } else {
                do jump();
            }

        }

        /*

            * Cooldown guide: (precision errors of 0-1)
            * Dash: 10-11 secs (200 rotations)
            * Gravity Control: 30-31 secs (600 rotations) -> (10200 ; -17 per rotation)

        */

        if (dash_cooldown > 0) {
            let dash_cooldown = dash_cooldown - 50;
        }

        
        if (gravity_cooldown > 0) {
            let gravity_cooldown = gravity_cooldown - 17;
        }

        do collision();

        return;

    }

    method void dash() {

        if (dash_cooldown = 0) {

            let dash_cooldown = 10000; //10 secs.

            do draw(false); //* remove player's current position
            
            if (gravity_direction = 1) {
                if (xpos+5 > 31) {let xpos = 19;}

                do update(xpos+5,ypos);
            } else {
                if (gravity_direction = 2) {

                    if (xpos+5 > 31) {let xpos = 19;}

                    do update(xpos+5,ypos);
                } else {
                    if (gravity_direction = 3) {
                        if (ypos-5 < 0) {let ypos = 19;}
                        do update(xpos,ypos-5);
                    } else {
                        if (gravity_direction = 4) {
                            if (ypos-5 < 0) {let ypos = 19;}
                            do update(xpos+5,ypos-5);
                        }
                    }
                }
            }

            do draw(true);

        }

        return;
        
    }

    method void summon_ground_ability() {

        return;

    }

    method void jump() {

        if ((jump_height > 0)) {

            /*

                * Clears current player
                * Updates location
                * Draws player at updated location

            */

            do draw(false);

            if (gravity_direction = 1) {
                do update(xpos, ypos-1); //* Update xpos and ypos.
            } else {
                if (gravity_direction = 2) {
                    do update(xpos, ypos+1); //* Update xpos and ypos.
                } else {
                    if (gravity_direction = 3) {
                        do update(xpos-1, ypos); //* Update xpos and ypos.
                    } else {
                        if (gravity_direction = 4) {
                            do update(xpos+1, ypos); //* Update xpos and ypos.
                        }
                    }
                }
            }

            do draw(true);

            do Sys.wait(20); //* Wait 1s before continuing. Adjust for animation
            let jump_height = jump_height - 1; //* Adjust 1 for smoother/rougher animation

        }

        //* Falling down will be handled by enforce gravity.

        return;

    }

    method void set_rotation(int angle, int mode) {

        if ( (mode < 0) | (mode > 1) ) {
            return;
        }

        if ((angle > 270) | (angle < 0)) {
            return;
        }

        if (angle = 18) {

            //* Special case when angle = 18, it means to keep angle the same but apply mode onto it.

            let rotation = (angle/10) + mode;
            return;

        }

        let rotation = (angle*10) + mode;

        return;

    }

    method void draw(boolean show) {
        var int memAddress, loc;
        let loc = (ypos * 512) + xpos; // 32*16 = 512
		let memAddress = 16384 + loc;

        /*
            ! Important to read this:

            * Median: 16384 + (ypos * 512) + xpos + 480
            * Used median (y) -> 16384 + (ypos * 512) + (xpos + 1) + 512
            * Used median (x) -> 16384 + (ypos * 512) + xpos + 257

            * Depends on rotation

            * Breakdown of different drawing modes
            
            * The rotation angles are as followed: rrrm -> where the first 3 r's define angle of rotation and m defines mode.
            
            * Available angles:
                * 0 (code: 0000)
                * 90 (code: 0900)
                * 180 (code: 1800)
                * 270 (code: 2700)
            
            * Available modes:

                * 0 -> No special effects ( Negation taken care by getIsDay() )
                * 1 -> Vertical Mirror: Inverses the image (or) gets the projection on the perpendicular axes to base

        */

        if (show)
        {

            if (GameController.getIsDay()) {

                //* No negations since day.

                if (rotation = 0) {

                    do Memory.poke(memAddress + 0, 1016);
                    do Memory.poke(memAddress + 32, 4092);
                    do Memory.poke(memAddress + 64, 4060);
                    do Memory.poke(memAddress + 96, 26284);
                    do Memory.poke(memAddress + 128, 8780);
                    do Memory.poke(memAddress + 160, 21068);
                    do Memory.poke(memAddress + 192, 21428);
                    do Memory.poke(memAddress + 224, 20913);
                    do Memory.poke(memAddress + 256, 8471);
                    do Memory.poke(memAddress + 288, 12220);
                    do Memory.poke(memAddress + 320, 14832);
                    do Memory.poke(memAddress + 352, 12720);
                    do Memory.poke(memAddress + 384, 8632);
                    do Memory.poke(memAddress + 416, 20976);
                    do Memory.poke(memAddress + 448, 9144);
                    do Memory.poke(memAddress + 480, 1976); //* This filled by 256 and rest by 0 to get median point.

                } else {

                    if (rotation = 1) {

                        do Memory.poke(memAddress + 0, 8128);
                        do Memory.poke(memAddress + 32, 16368);
                        do Memory.poke(memAddress + 64, 15344);
                        do Memory.poke(memAddress + 96, 13670);
                        do Memory.poke(memAddress + 128, 12868);
                        do Memory.poke(memAddress + 160, 12874);
                        do Memory.poke(memAddress + 192, 11722);
                        do Memory.poke(memAddress + 224, -29302);
                        do Memory.poke(memAddress + 256, -6012);
                        do Memory.poke(memAddress + 288, 15860);
                        do Memory.poke(memAddress + 320, 3996);
                        do Memory.poke(memAddress + 352, 3468);
                        do Memory.poke(memAddress + 384, 7556);
                        do Memory.poke(memAddress + 416, 3978);
                        do Memory.poke(memAddress + 448, 7620);
                        do Memory.poke(memAddress + 480, 7648);

                    } else {

                        if (rotation = 900) {

                            do Memory.poke(memAddress + 0, 384);
                            do Memory.poke(memAddress + 32, 128);
                            do Memory.poke(memAddress + 64, 32448);
                            do Memory.poke(memAddress + 96, -949);
                            do Memory.poke(memAddress + 128, -7169);
                            do Memory.poke(memAddress + 160, -11393);
                            do Memory.poke(memAddress + 192, -5084);
                            do Memory.poke(memAddress + 224, -3201);
                            do Memory.poke(memAddress + 256, -7169);
                            do Memory.poke(memAddress + 288, -445);
                            do Memory.poke(memAddress + 320, 28737);
                            do Memory.poke(memAddress + 352, 24672);
                            do Memory.poke(memAddress + 384, 1844);
                            do Memory.poke(memAddress + 416, 6394);
                            do Memory.poke(memAddress + 448, 5892);
                            do Memory.poke(memAddress + 480, 0);

                        } else {

                            if (rotation = 901) {

                                do Memory.poke(memAddress + 0, 384);
                                do Memory.poke(memAddress + 32, 256);
                                do Memory.poke(memAddress + 64, 894);
                                do Memory.poke(memAddress + 96, -11713);
                                do Memory.poke(memAddress + 128, -57);
                                do Memory.poke(memAddress + 160, -309);
                                do Memory.poke(memAddress + 192, 9271);
                                do Memory.poke(memAddress + 224, -305);
                                do Memory.poke(memAddress + 256, -57);
                                do Memory.poke(memAddress + 288, -15745);
                                do Memory.poke(memAddress + 320, -32242);
                                do Memory.poke(memAddress + 352, 1542);
                                do Memory.poke(memAddress + 384, 11488);
                                do Memory.poke(memAddress + 416, 24344);
                                do Memory.poke(memAddress + 448, 8424);
                                do Memory.poke(memAddress + 480, 0);

                            } else {

                                if (rotation = 1800) {

                                    do Memory.poke(memAddress + 0, 7648);
                                    do Memory.poke(memAddress + 32, 7620);
                                    do Memory.poke(memAddress + 64, 3978);
                                    do Memory.poke(memAddress + 96, 7556);
                                    do Memory.poke(memAddress + 128, 3468);
                                    do Memory.poke(memAddress + 160, 3996);
                                    do Memory.poke(memAddress + 192, 15860);
                                    do Memory.poke(memAddress + 224, -6012);
                                    do Memory.poke(memAddress + 256, -29302);
                                    do Memory.poke(memAddress + 288, 11722);
                                    do Memory.poke(memAddress + 320, 12874);
                                    do Memory.poke(memAddress + 352, 12868);
                                    do Memory.poke(memAddress + 384, 13670);
                                    do Memory.poke(memAddress + 416, 15344);
                                    do Memory.poke(memAddress + 448, 16368);
                                    do Memory.poke(memAddress + 480, 8128);

                                } else {

                                    if (rotation = 1801) {

                                        do Memory.poke(memAddress + 0, 1976);
                                        do Memory.poke(memAddress + 32, 9144);
                                        do Memory.poke(memAddress + 64, 20976);
                                        do Memory.poke(memAddress + 96, 8632);
                                        do Memory.poke(memAddress + 128, 12720);
                                        do Memory.poke(memAddress + 160, 14832);
                                        do Memory.poke(memAddress + 192, 12220);
                                        do Memory.poke(memAddress + 224, 8471);
                                        do Memory.poke(memAddress + 256, 20913);
                                        do Memory.poke(memAddress + 288, 21428);
                                        do Memory.poke(memAddress + 320, 21068);
                                        do Memory.poke(memAddress + 352, 8780);
                                        do Memory.poke(memAddress + 384, 26284);
                                        do Memory.poke(memAddress + 416, 4060);
                                        do Memory.poke(memAddress + 448, 4092);
                                        do Memory.poke(memAddress + 480, 1016);

                                    } else {

                                        if (rotation = 2700) {

                                            do Memory.poke(memAddress + 0, 0);
                                            do Memory.poke(memAddress + 32, 8424);
                                            do Memory.poke(memAddress + 64, 24344);
                                            do Memory.poke(memAddress + 96, 11488);
                                            do Memory.poke(memAddress + 128, 1542);
                                            do Memory.poke(memAddress + 160, -32242);
                                            do Memory.poke(memAddress + 192, -15745);
                                            do Memory.poke(memAddress + 224, -57);
                                            do Memory.poke(memAddress + 256, -305);
                                            do Memory.poke(memAddress + 288, 9271);
                                            do Memory.poke(memAddress + 320, -309);
                                            do Memory.poke(memAddress + 352, -57);
                                            do Memory.poke(memAddress + 384, -11713);
                                            do Memory.poke(memAddress + 416, 894);
                                            do Memory.poke(memAddress + 448, 256);
                                            do Memory.poke(memAddress + 480, 384);

                                        } else {

                                            if (rotation = 2701) {

                                                do Memory.poke(memAddress + 0, 0);
                                                do Memory.poke(memAddress + 32, 5892);
                                                do Memory.poke(memAddress + 64, 6394);
                                                do Memory.poke(memAddress + 96, 1844);
                                                do Memory.poke(memAddress + 128, 24672);
                                                do Memory.poke(memAddress + 160, 28737);
                                                do Memory.poke(memAddress + 192, -445);
                                                do Memory.poke(memAddress + 224, -7169);
                                                do Memory.poke(memAddress + 256, -3201);
                                                do Memory.poke(memAddress + 288, -5084);
                                                do Memory.poke(memAddress + 320, -11393);
                                                do Memory.poke(memAddress + 352, -7169);
                                                do Memory.poke(memAddress + 384, -949);
                                                do Memory.poke(memAddress + 416, 32448);
                                                do Memory.poke(memAddress + 448, 128);
                                                do Memory.poke(memAddress + 480, 384);

                                            }

                                        }

                                    }

                                }

                            }

                        }

                    }

                }

            } else {
                
                if (rotation = 0) {

                    do Memory.poke(memAddress + 0, -1017);
                    do Memory.poke(memAddress + 32, -4093);
                    do Memory.poke(memAddress + 64, -4061);
                    do Memory.poke(memAddress + 96, -26285);
                    do Memory.poke(memAddress + 128, -8781);
                    do Memory.poke(memAddress + 160, -21069);
                    do Memory.poke(memAddress + 192, -21429);
                    do Memory.poke(memAddress + 224, -20914);
                    do Memory.poke(memAddress + 256, -8472);
                    do Memory.poke(memAddress + 288, -12221);
                    do Memory.poke(memAddress + 320, -14833);
                    do Memory.poke(memAddress + 352, -12721);
                    do Memory.poke(memAddress + 384, -8633);
                    do Memory.poke(memAddress + 416, -20977);
                    do Memory.poke(memAddress + 448, -9145);
                    do Memory.poke(memAddress + 480, -1977);

                } else {

                    if (rotation = 1) {

                        do Memory.poke(memAddress + 0, -8129);
                        do Memory.poke(memAddress + 32, -16369);
                        do Memory.poke(memAddress + 64, -15345);
                        do Memory.poke(memAddress + 96, -13671);
                        do Memory.poke(memAddress + 128, -12869);
                        do Memory.poke(memAddress + 160, -12875);
                        do Memory.poke(memAddress + 192, -11723);
                        do Memory.poke(memAddress + 224, 29301);
                        do Memory.poke(memAddress + 256, 6011);
                        do Memory.poke(memAddress + 288, -15861);
                        do Memory.poke(memAddress + 320, -3997);
                        do Memory.poke(memAddress + 352, -3469);
                        do Memory.poke(memAddress + 384, -7557);
                        do Memory.poke(memAddress + 416, -3979);
                        do Memory.poke(memAddress + 448, -7621);
                        do Memory.poke(memAddress + 480, -7649);

                    } else {

                        if (rotation = 900) {

                            do Memory.poke(memAddress + 0, -385);
                            do Memory.poke(memAddress + 32, -129);
                            do Memory.poke(memAddress + 64, -32449);
                            do Memory.poke(memAddress + 96, 948);
                            do Memory.poke(memAddress + 128, 7168);
                            do Memory.poke(memAddress + 160, 11392);
                            do Memory.poke(memAddress + 192, 5083);
                            do Memory.poke(memAddress + 224, 3200);
                            do Memory.poke(memAddress + 256, 7168);
                            do Memory.poke(memAddress + 288, 444);
                            do Memory.poke(memAddress + 320, -28738);
                            do Memory.poke(memAddress + 352, -24673);
                            do Memory.poke(memAddress + 384, -1845);
                            do Memory.poke(memAddress + 416, -6395);
                            do Memory.poke(memAddress + 448, -5893);
                            do Memory.poke(memAddress + 480, -1);

                        } else {

                            if (rotation = 901) {

                                do Memory.poke(memAddress + 0, -385);
                                do Memory.poke(memAddress + 32, -257);
                                do Memory.poke(memAddress + 64, -895);
                                do Memory.poke(memAddress + 96, 11712);
                                do Memory.poke(memAddress + 128, 56);
                                do Memory.poke(memAddress + 160, 308);
                                do Memory.poke(memAddress + 192, -9272);
                                do Memory.poke(memAddress + 224, 304);
                                do Memory.poke(memAddress + 256, 56);
                                do Memory.poke(memAddress + 288, 15744);
                                do Memory.poke(memAddress + 320, 32241);
                                do Memory.poke(memAddress + 352, -1543);
                                do Memory.poke(memAddress + 384, -11489);
                                do Memory.poke(memAddress + 416, -24345);
                                do Memory.poke(memAddress + 448, -8425);
                                do Memory.poke(memAddress + 480, -1);

                            } else {

                                if (rotation = 1800) {

                                    do Memory.poke(memAddress + 0, -7649);
                                    do Memory.poke(memAddress + 32, -7621);
                                    do Memory.poke(memAddress + 64, -3979);
                                    do Memory.poke(memAddress + 96, -7557);
                                    do Memory.poke(memAddress + 128, -3469);
                                    do Memory.poke(memAddress + 160, -3997);
                                    do Memory.poke(memAddress + 192, -15861);
                                    do Memory.poke(memAddress + 224, 6011);
                                    do Memory.poke(memAddress + 256, 29301);
                                    do Memory.poke(memAddress + 288, -11723);
                                    do Memory.poke(memAddress + 320, -12875);
                                    do Memory.poke(memAddress + 352, -12869);
                                    do Memory.poke(memAddress + 384, -13671);
                                    do Memory.poke(memAddress + 416, -15345);
                                    do Memory.poke(memAddress + 448, -16369);
                                    do Memory.poke(memAddress + 480, -8129);

                                } else {

                                    if (rotation = 1801) {

                                        do Memory.poke(memAddress + 0, -1977);
                                        do Memory.poke(memAddress + 32, -9145);
                                        do Memory.poke(memAddress + 64, -20977);
                                        do Memory.poke(memAddress + 96, -8633);
                                        do Memory.poke(memAddress + 128, -12721);
                                        do Memory.poke(memAddress + 160, -14833);
                                        do Memory.poke(memAddress + 192, -12221);
                                        do Memory.poke(memAddress + 224, -8472);
                                        do Memory.poke(memAddress + 256, -20914);
                                        do Memory.poke(memAddress + 288, -21429);
                                        do Memory.poke(memAddress + 320, -21069);
                                        do Memory.poke(memAddress + 352, -8781);
                                        do Memory.poke(memAddress + 384, -26285);
                                        do Memory.poke(memAddress + 416, -4061);
                                        do Memory.poke(memAddress + 448, -4093);
                                        do Memory.poke(memAddress + 480, -1017);

                                    } else {

                                        if (rotation = 2700) {

                                            do Memory.poke(memAddress + 0, -1);
                                            do Memory.poke(memAddress + 32, -8425);
                                            do Memory.poke(memAddress + 64, -24345);
                                            do Memory.poke(memAddress + 96, -11489);
                                            do Memory.poke(memAddress + 128, -1543);
                                            do Memory.poke(memAddress + 160, 32241);
                                            do Memory.poke(memAddress + 192, 15744);
                                            do Memory.poke(memAddress + 224, 56);
                                            do Memory.poke(memAddress + 256, 304);
                                            do Memory.poke(memAddress + 288, -9272);
                                            do Memory.poke(memAddress + 320, 308);
                                            do Memory.poke(memAddress + 352, 56);
                                            do Memory.poke(memAddress + 384, 11712);
                                            do Memory.poke(memAddress + 416, -895);
                                            do Memory.poke(memAddress + 448, -257);
                                            do Memory.poke(memAddress + 480, -385);

                                        } else {

                                            if (rotation = 2701) {

                                                do Memory.poke(memAddress + 0, -1);
                                                do Memory.poke(memAddress + 32, -5893);
                                                do Memory.poke(memAddress + 64, -6395);
                                                do Memory.poke(memAddress + 96, -1845);
                                                do Memory.poke(memAddress + 128, -24673);
                                                do Memory.poke(memAddress + 160, -28738);
                                                do Memory.poke(memAddress + 192, 444);
                                                do Memory.poke(memAddress + 224, 7168);
                                                do Memory.poke(memAddress + 256, 3200);
                                                do Memory.poke(memAddress + 288, 5083);
                                                do Memory.poke(memAddress + 320, 11392);
                                                do Memory.poke(memAddress + 352, 7168);
                                                do Memory.poke(memAddress + 384, 948);
                                                do Memory.poke(memAddress + 416, -32449);
                                                do Memory.poke(memAddress + 448, -129);
                                                do Memory.poke(memAddress + 480, -385);

                                            }

                                        }

                                    }

                                }

                            }

                        }

                    }

                }

            }

        } else { //clear the sprite
            
            if (GameController.getIsDay()) {
                do Memory.poke(memAddress + 0, 0);
                do Memory.poke(memAddress + 32, 0);
                do Memory.poke(memAddress + 64, 0);
                do Memory.poke(memAddress + 96, 0);
                do Memory.poke(memAddress + 128, 0);
                do Memory.poke(memAddress + 160, 0);
                do Memory.poke(memAddress + 192, 0);
                do Memory.poke(memAddress + 224, 0);
                do Memory.poke(memAddress + 256, 0);
                do Memory.poke(memAddress + 288, 0);
                do Memory.poke(memAddress + 320, 0);
                do Memory.poke(memAddress + 352, 0);
                do Memory.poke(memAddress + 384, 0);
                do Memory.poke(memAddress + 416, 0);
                do Memory.poke(memAddress + 448, 0);
                do Memory.poke(memAddress + 480, 0);
            } else {
                do Memory.poke(memAddress + 0, -1);
                do Memory.poke(memAddress + 32, -1);
                do Memory.poke(memAddress + 64, -1);
                do Memory.poke(memAddress + 96, -1);
                do Memory.poke(memAddress + 128, -1);
                do Memory.poke(memAddress + 160, -1);
                do Memory.poke(memAddress + 192, -1);
                do Memory.poke(memAddress + 224, -1);
                do Memory.poke(memAddress + 256, -1);
                do Memory.poke(memAddress + 288, -1);
                do Memory.poke(memAddress + 320, -1);
                do Memory.poke(memAddress + 352, -1);
                do Memory.poke(memAddress + 384, -1);
                do Memory.poke(memAddress + 416, -1);
                do Memory.poke(memAddress + 448, -1);
                do Memory.poke(memAddress + 480, -1);
            }
        }

		return;
    }
}


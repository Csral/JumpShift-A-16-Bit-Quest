// screen size: 512x256
// axis - x: 0-31, y: 0-15
class Platform
{
    field int length, x, y;
    
    constructor Platform new(int x1, int y1, int l)
    {
        let length = l;
        let x = x1;
        let y = y1;
        return this;
    }
 
    method void draw(boolean show) {
		var int memAddress, i, loc, len;
        let i = 0;
        let len = length;
        // calculate the memory address from the x and y position
        let loc = (y * 512) + x; // 32*16 = 512
        // handle the platform going out of bounds
        if (x<0)
        {
            let len = len + x;
            // recalculate the memory address from the x and y position
            let loc = (y * 512); // 32*16 = 512
        }
        if (x+len>31)
        {
            let len = 32 - x;
        }
        if (len < 1)
        {
            return;
        }
		let memAddress = 16384 + loc;
        // draw the sprite till the length
        while(i < len)
        {
            if (show)
            {
                do Memory.poke(memAddress + 0, -1);
                do Memory.poke(memAddress + 32, -1);
                do Memory.poke(memAddress + 64, -1);
                do Memory.poke(memAddress + 96, -1);
                do Memory.poke(memAddress + 128, -1);
                do Memory.poke(memAddress + 160, -1);
                do Memory.poke(memAddress + 192, -1);
                do Memory.poke(memAddress + 224, -1);
                do Memory.poke(memAddress + 256, -1);
                do Memory.poke(memAddress + 288, -1);
                do Memory.poke(memAddress + 320, -1);
                do Memory.poke(memAddress + 352, 0);
                do Memory.poke(memAddress + 384, 0);
                do Memory.poke(memAddress + 416, 0);
                do Memory.poke(memAddress + 448, 0);
                do Memory.poke(memAddress + 480, 0);
            }
            else
            {
                do Memory.poke(memAddress + 0, 0);
                do Memory.poke(memAddress + 32, 0);
                do Memory.poke(memAddress + 64, 0);
                do Memory.poke(memAddress + 96, 0);
                do Memory.poke(memAddress + 128, 0);
                do Memory.poke(memAddress + 160, 0);
                do Memory.poke(memAddress + 192, 0);
                do Memory.poke(memAddress + 224, 0);
                do Memory.poke(memAddress + 256, 0);
                do Memory.poke(memAddress + 288, 0);
                do Memory.poke(memAddress + 320, 0);
                do Memory.poke(memAddress + 352, 0);
                do Memory.poke(memAddress + 384, 0);
                do Memory.poke(memAddress + 416, 0);
                do Memory.poke(memAddress + 448, 0);
                do Memory.poke(memAddress + 480, 0);
            }
            let memAddress = memAddress + 1;
            let i = i + 1;
        }
		return;
	}
    method void move () 
    {
        do draw(false);
        let x = x - 1;
        do draw(true);
        return;
    }
    method void dispose () {
        do Memory.deAlloc(this);
        return;
    }
}